<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>羡余</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/</link>
        <description>Recent content on 羡余</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Hongyun</copyright><atom:link href="https://hongyun-yu.github.io/Hugo-dev/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>编译原理知识汇总-01</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/p/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-01/</link>
        <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/p/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-01/</guid>
        <description>&lt;h1 id=&#34;编译原理知识汇总&#34;&gt;编译原理知识汇总
&lt;/h1&gt;&lt;h1 id=&#34;编译原理&#34;&gt;编译原理
&lt;/h1&gt;&lt;h2 id=&#34;第一章-引言&#34;&gt;第一章 引言
&lt;/h2&gt;&lt;h3 id=&#34;从面向机器的语言到面向人类的语言&#34;&gt;从面向机器的语言到面向人类的语言
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;汇编指令：&lt;/strong&gt; 用符号表示的指令被称为汇编指令
&lt;strong&gt;汇编语言：&lt;/strong&gt; 汇编指令的集合称为汇编语言&lt;/p&gt;
&lt;h3 id=&#34;语言之间的翻译&#34;&gt;语言之间的翻译
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;转换&lt;/strong&gt; (也被称为 &lt;strong&gt;预处理&lt;/strong&gt; )：高级语言之间的翻译&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编译：&lt;/strong&gt; 高级语言可以直接翻译成机器语言，也可以翻译成汇编语言，这两个翻译过程称为编译
&lt;strong&gt;汇编：&lt;/strong&gt; 从汇编语言到机器语言的翻译被称为汇编
&lt;strong&gt;交叉汇编：&lt;/strong&gt; 将一个汇编语言程序汇编成为可在另一机器上运行的机器指令成为交叉汇编
&lt;strong&gt;反汇编：&lt;/strong&gt; 把机器语言翻译成汇编语言
&lt;strong&gt;反编译：&lt;/strong&gt; 把汇编语言翻译成高级语言&lt;/p&gt;
&lt;img src=&#34;image\5267500-d4008e57f6e52e2c.png&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;h3 id=&#34;课程内容&#34;&gt;课程内容
&lt;/h3&gt;&lt;p&gt;介绍设计和构造编译程序的&lt;strong&gt;基本原理&lt;/strong&gt;和&lt;strong&gt;基本实现技术&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image\Ft8WNgqjp2FTy9aorBV1tR9BCCSk.png&#34; alt=&#34;Ft8WNgqjp2FTy9aorBV1tR9BCCSk&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;三种程序&#34;&gt;三种程序
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;翻译程序&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编译程序（compiler）&lt;/strong&gt;：把某一种&lt;strong&gt;高级语言程序&lt;/strong&gt;等价转换成另一种&lt;strong&gt;低级语言程序&lt;/strong&gt;（如汇编或机器语言）的程序&lt;/p&gt;
&lt;img src=&#34;image\image-20250217120413413.png&#34; alt=&#34;image-20250217120413413&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解释程序&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编译器与解释器&#34;&gt;编译器与解释器
&lt;/h3&gt;&lt;p&gt;（1）语言翻译的两种基本形态&lt;/p&gt;
&lt;img src=&#34;image\5267500-cbf938bbdf9e6dc1.png&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;解释器与编译器的主要区别:&lt;/strong&gt; 运行目标程序时的控制权在 &lt;code&gt;解释器&lt;/code&gt;而不在目标程序.&lt;/p&gt;
&lt;p&gt;（2）各自特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器:&lt;code&gt;工作效率高&lt;/code&gt;,即时间快、空间省；&lt;code&gt;交互性与动态性差,可移植性差&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;解释器:&lt;code&gt;工作效率低&lt;/code&gt;,即时间慢、空间费；&lt;code&gt;交互性与动态性好,可移植性好&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;共同点:均完成对 &lt;code&gt;源程序&lt;/code&gt;的翻译.
差异:编译器采用先翻译后执行,解释器采用边翻译边执行.&lt;/p&gt;
&lt;h3 id=&#34;编译器的工作原理与基本组成&#34;&gt;编译器的工作原理与基本组成
&lt;/h3&gt;&lt;p&gt;（1）以阶段划分编译器&lt;/p&gt;
&lt;img src=&#34;image\5267500-7813bda350b45828.png&#34; alt=&#34;image-20250217121558148&#34; /&gt;
&lt;p&gt;注：符号表管理器和出错处理贯穿编译器工作的各个阶段.&lt;/p&gt;
&lt;p&gt;（2）编译器各阶段工作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 &amp;gt; 词法分析：&lt;/strong&gt; 词法分析的 &lt;strong&gt;输入&lt;/strong&gt; 是 &lt;code&gt;源程序&lt;/code&gt;, &lt;strong&gt;输出&lt;/strong&gt; 是识别出的 &lt;code&gt;记号流&lt;/code&gt;. &lt;strong&gt;目的&lt;/strong&gt; 是 &lt;code&gt;识别单词&lt;/code&gt;. 至少分以下几类：关键字(保留字)、标识符、字面量、特殊符号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 &amp;gt; 语法分析：&lt;/strong&gt; &lt;strong&gt;输入&lt;/strong&gt; 是词法分析器返回的 &lt;code&gt;记号流&lt;/code&gt;, &lt;strong&gt;输出&lt;/strong&gt; 是 &lt;code&gt;语法树&lt;/code&gt;. &lt;strong&gt;目的&lt;/strong&gt; 是得到语言结构并以树的形式表示.对于声明性语句,进行符号表的查填,对于可执行语句,检查结构合理的表达式运算是否有意义.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3 &amp;gt; 语义分析：&lt;/strong&gt; 根据语义规则对语法树中的语法单元进行静态语义检查,如类型检查和转换等, &lt;strong&gt;目的&lt;/strong&gt; 在于保证语法正确的结构在语义分析上也是合法的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 &amp;gt; 中间代码生成(可选)：&lt;/strong&gt; 生成一种既接近目标语言,又与具体机器无关的表示,便于代码优化与代码生成.&lt;/p&gt;
&lt;p&gt;(到目前为止，编译器与解释器可以一致)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5 &amp;gt; 中间代码优化(可选)：&lt;/strong&gt; 局部优化、循环优化、全局优化等；优化实际上是一个等价变换，变换前后的指令序列完成同样的功能，但在占用的空间上和程序执行的时间上都更省、更有效&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6 &amp;gt; 目标代码生成：&lt;/strong&gt; 不同形式的目标代码—汇编语言形式、可重定位二进制代码形式、内存形式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7 &amp;gt; 符号表管理：&lt;/strong&gt; 合理组织符号,便于各阶段查找\填写等.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8 &amp;gt; 出错处理：&lt;/strong&gt;
动态错误：源程序中的逻辑错误，发生在程序运行的时候。也称为动态语义错误
静态错误：静态错误分为语法错误和静态语义错误.
&amp;lt;1&amp;gt; 语法错误：有关语言结构上的错误，如单词拼写错误、表达式缺少操作数、begin和end不匹配
&amp;lt;2&amp;gt; 静态语义错误：分析源程序时可以发现的语言意义上的错误，如加法的两个操作数一个是整形变量，另一个是数组名&lt;/p&gt;
&lt;p&gt;（4）编译器的分析\综合模式&lt;/p&gt;
&lt;img src=&#34;image\5267500-afbb123ec5a660fe.png&#34; alt=&#34;img&#34; /&gt;
&lt;p&gt;逻辑上把编译器分为 &lt;code&gt;分析(前端)部分&lt;/code&gt;和 &lt;code&gt;综合(后端)部分&lt;/code&gt;.
1&amp;gt; 分析(前端)：语言结构和意义的分析； 从词法分析到中间代码生成各阶段的工作
2&amp;gt; 综合(后端)：语言意义处理；从中间代码生成到目标代码生成的各阶段的工作
3&amp;gt; 编译器和解释器的区别往往是在形成中间代码之后开始的.&lt;/p&gt;
&lt;h3 id=&#34;编译器扫描的遍数&#34;&gt;编译器扫描的遍数
&lt;/h3&gt;&lt;p&gt;每个阶段将程序完整分析一遍的工作模式称为一遍扫描。
(将源程序或源程序的某种形式的中间表示完整分析一遍，亦称作一遍扫描)&lt;/p&gt;
&lt;h2 id=&#34;第二章-词法分析&#34;&gt;第二章 词法分析
&lt;/h2&gt;&lt;h3 id=&#34;词法分析中的若干问题&#34;&gt;词法分析中的若干问题
&lt;/h3&gt;&lt;p&gt;(1) 记号、模式与单词&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单词的分类：&lt;/strong&gt; 关键字(保留字)、标识符、字面量、特殊符号
&lt;strong&gt;模式（pattern）&lt;/strong&gt; ：产生/识别单词的规则
&lt;strong&gt;记号（token）&lt;/strong&gt; ：按照某个模式(或规则)识别出的元素(一组)
&lt;strong&gt;单词（lexeme）&lt;/strong&gt; ：被识别出的元素的值(字符串本身) ，也称为词值&lt;/p&gt;
&lt;p&gt;(2) 词法分析器的作用与工作方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析器的作用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1&amp;gt; 识别记号并交给语法分析器(根据模式识别记号)
2&amp;gt; 滤掉源程序中的无用成分,如注释、空格和回车等
3&amp;gt; 处理与具体平台有关的输入(如文件结束符的不同表示等)
4&amp;gt; 调用符号表管理器和出错处理器，进行相关处理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作方式：&lt;/strong&gt;
1.单独一遍扫描
2.作为语法分析器的子程序
3.并行方式&lt;/p&gt;
&lt;h3 id=&#34;模式的形式化描述&#34;&gt;模式的形式化描述
&lt;/h3&gt;&lt;p&gt;(1) 字符串与语言&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语言L&lt;/strong&gt; 是有限字母表∑上有限长度字符串的集合.
定义中强调两个有限，因为计算机的表示能力有限 ：
1&amp;gt; 字母表是有限的，即字母表中元素是有限多个；
2&amp;gt; 字符串的长度是有限的，即字符串中字符个数是有限多个。&lt;/p&gt;
&lt;p&gt;(字符串与字符串集合相关的概念与运算,如前缀、后缀、子串、子序列等，字符串的并、交、连接、差、闭包)&lt;/p&gt;
&lt;p&gt;(2) 正规式与正规集&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;令Σ是一个有限字母表，则Σ上的 正规式 及其表示的集合递归定义如下:
    1. ε是正规式，它表示集合  L(ε) = {ε}
    2. 若a是Σ上的字符，则a是正规式，它表示集合L(a)={a}
    3. 若正规式r和s分别表示集合L(r)和L(s)，则
       （a） r|s是正规式，表示集合L(r)∪L(s)，
       （b） rs是正规式，表示集合L(r)L(s)，
       （c） r*是正规式，表示集合(L(r))*，
       （d）(r)是正规式，表示的集合仍然是L(r)。
括弧用来改变运算的先后次序！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可用正规式描述(其结构)的语言称为 正规语言 或 &lt;strong&gt;正规集&lt;/strong&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;若运算的优先级和结合性做下述约定:
    1. 三种运算均具有左结合性质；
    2. 优先级从高到低顺序排列为:闭包运算、连接运算、或运算。
则正规式中不必要的括号可以被省略。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若正规式P和Q表示了同一个正规集，则称P和Q是 &lt;strong&gt;等价&lt;/strong&gt; 的，记为P=Q&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5267500-b058d82c0bc660cc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;(3) 简化正规式描述(主要是简化书写上的复杂)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(a) 正闭包 若r是表示L(r)的正规式，则r+是表示(L(r))+的正规式，且下述等式成立:r+ = rr* = rr，r = r+|ε;
          +与*具有相同的运算结合性和优先级
(b) 可缺省  若r是正规式，则r?是表示L(r)∪{ε}的正规式，且下述等式成立:r? = r|ε
           ? 与 * 具有相同的运算结合性和优先级
(c) 串    若r是若干字符进行连接运算构成的正规式，则:串“r” =  r ，且: ε= “”，   a = “a”（a是Σ的任一字符）
(d) 字符组 若r是若干字符进行|运算构成的正规式，则可改写为  [r’]，其中r’可以有如下两种书写形式：
             枚举:      如  a|b|e|h，可写为 [abeh]：
             分段:   如0|1|2|3|4|5|6|7|8|9|a|b|c|d|e , 可写为： [0-9a-e]
(e) 非字符组 若[r]是一个字符组形式的正规式，则[^r]是表示∑- L([r])的正规式。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;记号的识别有限自动机&#34;&gt;记号的识别——有限自动机
&lt;/h3&gt;&lt;p&gt;(1) 不确定的有限自动机（NondeterministicFinite Automaton, NFA）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NFA是一个五元组（5-tuple）：M =（S，∑，move，s0，F），其中
（1） S是有限个状态（state）的集合；
（2） ∑是有限个输入字符（包括ε）的集合；
（3） move是一个状态转移函数，move(si，ch)=sj表示，当前状态si下若遇到输入字符ch，则转移到状态sj；
（4） s0是唯一的初态（也称开始状态）；
（5） F是终态集（也称接受状态集），它是S的子集，包含了所有的终态。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;1&amp;gt; 直观的表示方式&lt;/p&gt;
&lt;p&gt;① 状态转换图：用一个有向图来直观表示NFA
② 状态转换矩阵：用一个矩阵来直观表示NFA (矩阵中，状态对应行，字符对应列)&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; NFA(识别记号)的特点
NFA识别记号的最大特点是它的不确定性，即在当前状态下对同一字符有多于一个的下一状态转移。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;具体体现：
定义： move函数是1对多的；
状态转换图：从同一状态出发，可通过多于一条标记相同字符的边转移到不同的状态；
状态转换矩阵： M[si,a]是一个状态的集合
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;3&amp;gt; NFA识别记号存在的问题&lt;/p&gt;
&lt;p&gt;1.只有尝试了全部可能的路径,才能确定一个输入序列不被接受,而这些路径的条数随着路径长度的增长成指数增长
2.识别过程中需要进行大量回朔，时间复杂度升高且算法复杂&lt;/p&gt;
&lt;p&gt;(2) 确定的有限自动机（Deterministic Finite Automaton, DFA）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义: DFA是NFA的一个特例，其中：
  （1）没有状态具有ε状态转移(ε-transition)，即状态转换图中没有标记ε的边；
  （2）对每个状态s和每个字符a，最多有一个下一状态。

特点：与NFA相比，DFA的特征：确定性
    定义：move（si, a)函数都是 1对1 的；
    转换图 从一个状态出发的任2条边上的标记均不同；
    转换矩阵：M[si,a]是一个状态   且字母表不包括ε。
提示：正规式和有限自动机从两个侧面表示正规式。正规式是描述，自动机是识别。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;从正规式到词法分析器&#34;&gt;从正规式到词法分析器
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;构造词法分析器的一般方法和步骤：
1. 用正规式描述模式（为记号设计正规式）；
2. 为每个正规式构造一个NFA，它识别正规式所表示的正规集；
3. 将构造的NFA转换成等价的DFA，这一过程也被称为确定化；
4. 优化DFA，使其状态数最少，这一过程也被称为最小化；
5. 根据优化后的DFA构造词法分析器。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1) 从正规式到NFA&lt;/p&gt;
&lt;p&gt;Thompson 算法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5267500-81bf06598a2d56c3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;(2) 从NFA到DFA&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- smove(S, a)：从状态集S出发，标记为a的下一状态全体。与move(s, a)的唯一区别：用状态集取代状态
- ε-闭包(T)：从状态集T出发，不经任何字符达到的状态全体
- “子集法”构造DFA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(3) 最小化DFA&lt;/p&gt;
&lt;p&gt;① 对于任何两个状态t和s，若从一状态出发接受输入字符串ω，而从另一状态出发不接受ω.&lt;/p&gt;
&lt;p&gt;或者，② 从t出发和从s出发到达不同的接受状态，则称ω对状态t和s是可区分的.&lt;/p&gt;
&lt;p&gt;不可区分的状态位于一个组内，可以合并成一个状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要步骤：&lt;/strong&gt;
1.初始划分：终态组 ， 非终态组；
2.利用可区分的概念，反复分裂划分中的组Gi，直到不可再分裂；
3.由最终划分构造D&amp;rsquo;，关键是选代表和修改状态转移；
4.消除可能的死状态和不可达状态。&lt;/p&gt;
&lt;h3 id=&#34;从dfa构造词法分析器&#34;&gt;从DFA构造词法分析器
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;分类：&lt;/strong&gt; 表驱动型的词法分析器；直接编码的词法分析器
&lt;strong&gt;比较：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表驱动&lt;/th&gt;
&lt;th&gt;直接编码&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;分析器的速度&lt;/td&gt;
&lt;td&gt;慢&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;程序与模式的关系&lt;/td&gt;
&lt;td&gt;无关&lt;/td&gt;
&lt;td&gt;有关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;适合的编写方法&lt;/td&gt;
&lt;td&gt;工具生成&lt;/td&gt;
&lt;td&gt;手工编写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分析器的规模&lt;/td&gt;
&lt;td&gt;较大&lt;/td&gt;
&lt;td&gt;较小&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;第三章-语法分析&#34;&gt;第三章 语法分析
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;词法分析：&lt;/strong&gt; 记号的集合，字符串由字母组成，线性结构
&lt;strong&gt;语法分析：&lt;/strong&gt; 句子的集合，句子由记号组成，非线性结构（树）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法分析的双重含义：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法规则：上下文无关文法（子集：LL文法或LR文法）&lt;/li&gt;
&lt;li&gt;语法分析：下推自动机（LL或LR分析器）、自上而下分析、自下而上分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-语法分析的若干问题&#34;&gt;1. 语法分析的若干问题
&lt;/h3&gt;&lt;p&gt;许多编译器，特别是由自动生成工具构造的编译器，往往其前端的中心部件就是语法分析器&lt;/p&gt;
&lt;p&gt;（1）语法分析器的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据词法分析器提供的记号流，为语法正确的输入构造分析树（或语法树）&lt;/li&gt;
&lt;li&gt;检查输入中的语法（可能包括词法）错误，并调用出错处理器进行适
当处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5267500-a3f0ae180f91152e.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（2）语法错误的处理原则&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源程序中可能出现的错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法(包括词法)错误和语义错误(静态语义错误和动态语义错误)&lt;/p&gt;
&lt;p&gt;注：跟第一章的分类角度不同，第一章是从静态错误(语法错误，静态语义错误)和动态错误(动态语义错误)分类的，但是殊途同归。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法错误：&lt;/strong&gt; 指非法字符或拼写错关键字、标识符等
&lt;strong&gt;语法错误：&lt;/strong&gt; 指语法结构出错，如少分号、括号不匹配、begin/end不配对等
&lt;strong&gt;静态语义错误：&lt;/strong&gt; 如类型不一致、参数不匹配等
&lt;strong&gt;动态语义错误(逻辑错误)：&lt;/strong&gt; 如死循环、变量为零时作除数等&lt;/p&gt;
&lt;h3 id=&#34;2-上下文无关文法cfg&#34;&gt;2. 上下文无关文法(CFG)
&lt;/h3&gt;&lt;p&gt;（1）上下文无关文法(Context Free Grammar,CFG)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CFG是一个四元组G =（N，T，P，S），其中
（1） N是非终结符（Nonterminals）的有限集合；
（2） T是终结符（Terminals）的有限集合，且N∩T=Φ；
（3） P是产生式（Productions）的有限集合，A→α，其中A∈N(左部),α∈(N∪T)*(右部),若α=ε，则称A→ε为空产生式(也可以记为A →);
（4） S是非终结符，称为文法的开始符号（Start symbol）
 注： S ∈ N , N可以出现在产生式左边和右边，T绝不出现在产生式左边.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）CFG产生语言的基本方法－推导&lt;/p&gt;
&lt;p&gt;CFG（产生式）通过推导的方法产生语言，即（通俗地讲）从开始符号S开始，反复使用产生式：将产生式左部的非终结符替换为右部的文法符号序列(展开产生式，用=&amp;gt;表示)，直到得到一个终结符序列。&lt;/p&gt;
&lt;p&gt;**1 &amp;gt; 直接推导：**利用产生式产生句子的过程中，将用产生式A→γ的右部代替文法符号序列αAβ中的A得到αγβ的过程，称αAβ直接推导出αγβ，记作：αAβ=&amp;gt;αγβ&lt;/p&gt;
&lt;p&gt;**2 &amp;gt; 零步或多步推导：**若对于任意文法符号序列α1，α2，&amp;hellip;αn，有α1=&amp;gt;α2=&amp;gt;&amp;hellip;=&amp;gt;αn，则称此过程为零步或多步推导，记为：α1 =*&amp;gt; αn，其中α1=αn的情况为零步推导。&lt;/p&gt;
&lt;p&gt;**3 &amp;gt; 至少一次推导：**若α1≠αn，即推导过程中至少使用一次产生式,则称此过程为至少一步推导，记为：α1 =+&amp;gt; αn&lt;/p&gt;
&lt;p&gt;(推导具有自反性和传递性)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 &amp;gt;&lt;/strong&gt; 由 CFGG 所产生的语言L(G)被定义为: L(G) = { ω┃S ωand ω∈T* }，
L(G)称为上下文无关语言(Context Free Language, CFL)，ω称为句子。
若S =* &amp;gt; α，α∈(N∪T)*，则称α为G的一个句型。句子一定是句型，反之不是。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5 &amp;gt;&lt;/strong&gt; 在推导过程中，若每次直接推导均替换句型中最左边的非终结符，则称为 &lt;code&gt;最左推导&lt;/code&gt;，由最左推导产生的句型被称为 &lt;code&gt;左句型&lt;/code&gt;。 类似的可以定义最右推导与右句型，最右推导也被称为规范推导。&lt;/p&gt;
&lt;p&gt;（3）推导、分析树与语法树&lt;/p&gt;
&lt;p&gt;1、分析树既反映语言结构的实质，也反映推导过程。&lt;/p&gt;
&lt;p&gt;2、对CFGG的句型， &lt;strong&gt;分析树&lt;/strong&gt; 被定义为具有下述性质的一棵树。&lt;/p&gt;
&lt;p&gt;（1） 根由开始符号所标记；
（2） 每个叶子由一个终结符、非终结符、或ε标记；
（3） 每个内部结点由一个非终结符标记；
（4） 若A是某内部节点的标记，且X1，X2，&amp;hellip;，Xn是该节点从左到右所有孩子的标记，则A→X1X2&amp;hellip;Xn是一个产生式。若A→ε，则标记为A的结点可以仅有一个标记为ε的孩子。&lt;/p&gt;
&lt;p&gt;注：分析树的叶子，从左到右构成G的一个句型。若叶子仅由终结符标记，则构成一个句子。&lt;/p&gt;
&lt;p&gt;3、对CFG G的句型，表达式的语法树被定义为具有下述性质的一棵树:&lt;/p&gt;
&lt;p&gt;（1） 根与内部节点由表达式中的操作符标记；（2） 叶子由表达式中的操作数标记；（3）用于改变运算优先级和结合性的括号，被隐含在语法树的结构中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法树是表示表达式结构的最好形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（4）二义性与二义性的消除&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二义性：&lt;/strong&gt; 若文法G对 同 一句子产生不止一棵 &lt;code&gt;分析树&lt;/code&gt;，则称G是二义的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt;
1&amp;gt; 一个句子有多于一棵分析树，仅与文法和句子有关，与采用的推导方法无关；
2&amp;gt; 造成文法二义的根本原因：文法中缺少对文法符号优先级和结合性的规定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二义性消除的方法：&lt;/strong&gt;
① 改写二义文法为非二义文法；
② 规定二义文法中符号的优先级和结合性，使仅产生一棵分析树。&lt;/p&gt;
&lt;h3 id=&#34;3-语法与文法简介&#34;&gt;3. 语法与文法简介
&lt;/h3&gt;&lt;p&gt;（1）正规式与上下文无关文法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记号可以用正规式描述，正规式适合描述线性结构，如标识符、关键字、注释等.&lt;/li&gt;
&lt;li&gt;句子可以用CFG描述，CFG适合描述具有嵌套(层次)性质的非线性结构，如不同结构的句子if-then-else\while-do等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正规式所描述的语言结构均可以用CFG描述，反之不一定.&lt;/p&gt;
&lt;p&gt;（2）上下文有关文法CSG&lt;/p&gt;
&lt;p&gt;典型的这类语言结构包含：计数问题的抽象、变量的声明与引用、过程调用时形参与实参的一致性检查等.描述它们的文法被称为上下文有关文法(Context Sensitive Grammar，CSG).这些语言结构无法用上下文无关文法CSG来描述.&lt;/p&gt;
&lt;p&gt;（3）形式语言与自动机简介&lt;/p&gt;
&lt;p&gt;若文法G=(N，T，P，S)的每个产生式α→β中，均有α∈(N∪T) &lt;em&gt;，且至少含有一个非终结符，β∈(N∪T)&lt;/em&gt; ，则称G为0型文法.&lt;/p&gt;
&lt;p&gt;对0型文法施加以下第i条限制，即得到i型文法。&lt;/p&gt;
&lt;p&gt;1&amp;gt; G的任何产生式α→β（S→ε除外）满足|α|≤|β|；
2&amp;gt; G的任何产生式形如A→β，其中A∈N，β∈(N∪T)*；
3&amp;gt; G的任何产生式形如A→a或者A→aB(或者A→Ba)，其中A和B∈N，a∈T。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文法&lt;/th&gt;
&lt;th&gt;语言&lt;/th&gt;
&lt;th&gt;自动机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;短语文法(0型)&lt;/td&gt;
&lt;td&gt;短语结构语言&lt;/td&gt;
&lt;td&gt;图灵机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSG(1型)&lt;/td&gt;
&lt;td&gt;CSL&lt;/td&gt;
&lt;td&gt;线性界线自动机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CFG(2型)&lt;/td&gt;
&lt;td&gt;CFL&lt;/td&gt;
&lt;td&gt;下推自动机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;正规文法(3型)&lt;/td&gt;
&lt;td&gt;正规集&lt;/td&gt;
&lt;td&gt;有限自动机&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-自上而下语法分析&#34;&gt;4. 自上而下语法分析
&lt;/h3&gt;&lt;p&gt;分为：递归下降分析法、预测分析法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本思想：&lt;/strong&gt; 对任何一个输入序列ω，从S开始进行最左推导，直到得到一个合法的句子或发现一个非法结构。整个自上而下分析是一个试探的过程，是反复使用不同产生式谋求与输入序列匹配的过程。&lt;/p&gt;
&lt;p&gt;提前准备—— &lt;strong&gt;重写文法：&lt;/strong&gt; 1.消除左递归，以避免陷入死循环； 2.提取左因子，以避免回溯.&lt;/p&gt;
&lt;p&gt;（1）消除左递归&lt;/p&gt;
&lt;p&gt;定义：若文法G中的非终结符A，对某个文法符号序列α存在推导A =+&amp;gt; Aα，则称G是左递归的。若G中有形如A→Aα的产生式，则称该产生式对A直接左递归。&lt;/p&gt;
&lt;p&gt;&amp;lt;1&amp;gt; 消除文法的直接左递归&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A→Aα|β     替换为     A →βA&#39;
                    A&#39;→αA&#39;|ε
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先，整理A产生式为如下形式：A→ Aα1|Aα2|&amp;hellip;|Aαm|β1|β2|&amp;hellip;|βn
然后用下述产生式代替A产生式：A→ β1 A&amp;rsquo;|β2 A&amp;rsquo;| &amp;hellip;|βn A&#39;
A&amp;rsquo;→ α1 A&amp;rsquo; | α2 A&amp;rsquo; | &amp;hellip; | αm A&amp;rsquo; |ε&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 消除文法的左递归&lt;/p&gt;
&lt;p&gt;核心思想：将无直接左递归的非终结符展开到其他产生式,然后消除其他产生式中的直接左递归(如果有的话)&lt;/p&gt;
&lt;p&gt;若G产生句子的过程中出现A=+A的推导，则无法消除左递归(出现回路)&lt;/p&gt;
&lt;p&gt;（2）提取左因子&lt;/p&gt;
&lt;p&gt;&amp;lt;1&amp;gt; 提取文法的左因子&lt;/p&gt;
&lt;p&gt;左因子产生原因：公共前缀：A → αβ1|αβ2
方法：将 A → αβ1|αβ2|γ
替换为 A→αA&amp;rsquo;|γ A&amp;rsquo;→β1|β2&lt;/p&gt;
&lt;p&gt;（3）递归下降分析&lt;/p&gt;
&lt;p&gt;直接以程序代码（的方式）模拟产生式产生语言的过程:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本思想：&lt;/strong&gt; 每个非终结符对应一个子程序（函数），过程体中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生式右部的非终结符：对应子程序调用，&lt;/li&gt;
&lt;li&gt;产生式右部的终结符： 与输入记号序列进行匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;
1&amp;gt; 子程序是递归的（因为文法是递归的）；
2&amp;gt; 程序与文法相关；
3&amp;gt; &lt;strong&gt;&lt;em&gt;它对文法的限制是不能有公共左因子和左递归；&lt;/em&gt;&lt;/strong&gt;
4&amp;gt; 它是一种非形式化的方法，只要能写出子程序，用什么样的方法和步骤均可。&lt;/p&gt;
&lt;p&gt;（4）预测分析器&lt;/p&gt;
&lt;p&gt;☆ 预测分析器由一张预测分析表、一个符号栈和一个驱动器组成，数学模型是下推自动机。
☆ 对文法的限制是不能有公共左因子和左递归&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5267500-4fbb189fad81f346.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;预测分析器的核心概念：
1&amp;gt; 分析方法：格局与格局变换
2&amp;gt; 分析表+驱动器（模拟算法）
3&amp;gt; 预测分析表的构造
4&amp;gt; LL（文法、语言、分析器）&lt;/p&gt;
&lt;p&gt;☆ 开始格局的剩余输入是全部输入序列，而接收格局中剩余输入应该为空，任何其他格局或出错格局中的剩余输入应该是全部输入序列的一个后缀.&lt;/p&gt;
&lt;p&gt;☆ 改变格局的动作：&lt;/p&gt;
&lt;p&gt;① 匹配终结符： 若top=ip(但≠#)，则pop且next(ip)；
② 展开非终结符：若top^= X且M[X,ip^]=α(X→α)，则pop且push(α)；
③ 报告分析成功： 若top ^= ip^ = #，则分析成功并结束；
④ 报告出错：其它情况，调用错误恢复例程.&lt;/p&gt;
&lt;p&gt;☆ 驱动器算法&lt;/p&gt;
&lt;p&gt;☆ 构造预测分析表&lt;/p&gt;
&lt;p&gt;步骤：1. 构造文法符号X的FIRST集合和非终结符的FOLLOW集合；2. 根据两个集合构造预测分析表.&lt;/p&gt;
&lt;p&gt;通俗地讲，α的FIRST集合就是从α开始可以导出的文法符号序列中的开头终结符。而A的FOLLOW集合，就是从开始符号可以导出的所有含A的文法符号序列中紧跟A之后的终结符.&lt;/p&gt;
&lt;p&gt;&amp;lt;1&amp;gt; 计算X的FIRST集合 &amp;mdash;&amp;ndash;自下而上计算
&amp;lt;2&amp;gt; 计算所有非终结符的FOLLOW集合 —— 自上而下计算
&amp;lt;3&amp;gt; 构造预测分析表
&amp;lt;4&amp;gt; LL(1)文法&lt;/p&gt;
&lt;p&gt;文法G被称为是LL(1)文法，当且仅当为它构造的 &lt;code&gt;预测分析表&lt;/code&gt;中 &lt;code&gt;不含多重定义&lt;/code&gt;的条目。由此分析表所组成的分析器被称为 &lt;code&gt;LL(1)分析器&lt;/code&gt;，它所分析的语言被称为 &lt;code&gt;LL(1)语言&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;☆ 第一个L代表从左到右扫描输入序列，第二个L表示产生最左推导，1表示在确定分析器的每一步动作时向前看一个终结符.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;推论3.2 G是LL(1)的，当且仅当G的任何两个产生式A→α|β满足:
1. 对任何终结符a，α和β不能同时推导出以a开始的串；即First(α) ∩ First(β) = ∅
2. α和β最多有一个可以推导出ε；
3. 若β =*&amp;gt; ε,则α不能导出以FOLLOW(A)中终结符开始的任何串. 即First(α) ∩ Follow(A) = ∅
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;☆ 无论是递归下降子程序法还是非递归的预测分析法，他们都只能处理LL(1)文法.&lt;/p&gt;
&lt;h3 id=&#34;5-自下而上语法分析&#34;&gt;5. 自下而上语法分析
&lt;/h3&gt;&lt;p&gt;☆ 自上而下分析采用的是推导;自下而上分析采用的是归约(规范归约—剪句柄—移进/归约分析—SLR(1)分析器).&lt;/p&gt;
&lt;p&gt;（1）自下而上分析的基本方法&lt;/p&gt;
&lt;p&gt;☆ &lt;strong&gt;基本思想：&lt;/strong&gt; 最左归约.&lt;/p&gt;
&lt;p&gt;对于每个输入序列ω：从左到右扫描ω; 从ω开始,反复用产生式的左部替换产生式的右部(即当前句型中的句柄)、谋求对ω的匹配,最终得到文法的开始符号，或者发现一个错误。&lt;/p&gt;
&lt;p&gt;☆ &lt;strong&gt;基本概念：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a) &amp;gt; 设αβδ是文法G的一个句型，若存在S=*&amp;gt;αAδ，A=+&amp;gt;β， 则称β是句型αβδ相对于A的&amp;quot;短语&amp;quot;.
   &amp;gt; 特别的，若 有A→β，则 称β是句型αβδ相对于产生式A→β的&amp;quot;直接短语&amp;quot;.
   &amp;gt; 一个句型的最左直接短语被称为&amp;quot;句柄&amp;quot;.

特征：
    1.  短语：以非终结符为根子树中所有从左到右的叶子；
    2.  直接短语：只有父子关系的子树中所有从左到右排列的叶子（树高为2）；
    3.  句柄：最左边父子关系树中所有从左到右排列的叶子（句柄是唯一的）

b)最左归约：若 α是文法G的句子且满足下述条件，则称序列αn，αn-1，...，α0是α的一个最左归约。
   1) αn = α
   2) α0 = S（S是G 的开始符号）
   3) 对任何i(0&amp;lt;i&amp;lt;=n)，αi-1是将αi中句柄替换为相应产生式左部非终结符得到的
☆ 最左归约的逆过程是一个最右推导，分别称最右推导和最左归约为规范推导和规范归约.
c）移进-归约分析器
 1. 工作方式：格局与格局变换
 2. 分析表
 3. 驱动器（模拟算法）
 4. SLR分析表的构造
 5. LR（文法、语言、分析器）
☆ 改变格局的动作：
1. 移进(shift)：当前剩余输入的下一终结符进栈。
2.归约(reduce)：将栈顶句柄替换为对应非终结符(最左归约)
3.接受(accept)：宣告分析成功
4. 报错(error)：发现语法错误，调用错误恢复例程
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5267500-48f1ed06a22fec8e.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;(2) LR分析&lt;/p&gt;
&lt;p&gt;a) LR分析与LR文法
LR分析： ** &lt;em&gt;允许左递归，但不能有二义&lt;/em&gt;**&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义3.15 若为文法G构造的移进-归约分析表中不含多重定义的条目，则称G为&amp;quot;LR(k)文法&amp;quot;，分析器被称为是&amp;quot;LR(k)分析器&amp;quot;，它所识别的语言被称为&amp;quot;LR(k)语言&amp;quot;。&amp;quot;L&amp;quot;表示从左到右扫描输入序列，&amp;quot;R&amp;quot;表示逆序的最右推导，&amp;quot;k&amp;quot;表示为确定下一动作向前看的终结符个数，一般情况下k&amp;lt;=1。当k=1时，简称&amp;quot;LR&amp;quot;。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;构造SLR(1)分析器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;1&amp;gt; 活前缀与LR(0)项目&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;第1步&lt;/th&gt;
&lt;th&gt;第2~N步&lt;/th&gt;
&lt;th&gt;状态&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;词法&amp;ndash;DFA&lt;/td&gt;
&lt;td&gt;ε-closure(S)&lt;/td&gt;
&lt;td&gt;ε-closure(smove(S,a))&lt;/td&gt;
&lt;td&gt;状态集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;语法&amp;ndash;DFA&lt;/td&gt;
&lt;td&gt;closure(I)&lt;/td&gt;
&lt;td&gt;closure(goto(I,x))&lt;/td&gt;
&lt;td&gt;项目集&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;出现在移进-归约分析器栈中的右句型的前缀，被称为文法G的 &lt;strong&gt;活前缀(viable prefix)&lt;/strong&gt;.
&lt;strong&gt;LR(0)项目(简称项目)&lt;/strong&gt; 是这样一个产生式，在它右边的某个位置有一个点&amp;quot;.&amp;quot;。对于A→ε，它仅有一个项目A→.。
项目A→α.β显示了分析过程中看到(移进)了产生式的多少。
β不为空的项目称为 &lt;strong&gt;可移进项目&lt;/strong&gt; ，β为空的项目称为 &lt;strong&gt;可归约项目&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 拓广文法与识别活前缀的DFA&lt;/p&gt;
&lt;p&gt;G&amp;rsquo; = G ∪ {S&amp;rsquo; → S}
其中：S&amp;rsquo; → S是识别S的初态，S&amp;rsquo; → S. 是识别S的终态. 目的是使最终构造的DFA状态集中具有唯一的初态和终态. ① closure(I)：从项目集I不经任何文法符号到达的项目全体；&lt;/p&gt;
&lt;p&gt;② goto(I，x)：所有从I经文法符号x能直接到达的项目全体。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;项目[S’→.S]和所有“.”不在产生式右部最左边的项目称为核心项目(kernel items)，
其它“.”在产生式右部最左边的项目(不包括[S’→.S])称为非核心项目(nonkernel items).

核心项目：J=goto(I，X)，S&#39;→.S（作为项目集的代表）
非核心项目：closure(J)-J（特点：可由J某中某项目算得）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5267500-4801bd8adeba1c8b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;3&amp;gt; 识别活前缀&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义3.21 若存在最右推导S’=*&amp;gt; αAω =&amp;gt; αβ1β2ω，则称项目[A→β1.β2] 对活前缀αβ1有效。

当一个项目集中同时存在：
    1. A→β1.β2和B→β.：既可移进又可归约，移进/归约冲突
    2.A→α.和B→β.：均可指导下一步分析，归约/归约冲突
解决方法：简单向前看一个终结符：
    1. 移进/归约冲突：若FIRST(β2)∩FOLLOW(B)=Φ，冲突可解决
    2. 归约/归约冲突：若FOLLOW(A)∩FOLLOW(B)=Φ，冲突可解决
若冲突可以解决，则称文法为SLR(1)文法，构造的分析表为SLR(1)分析表。
SLR(1)文法：简单向前看一个终结符即可解决冲突
☆ 二义文法不是SLR(1)文法
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;第四章-静态语义分析&#34;&gt;第四章 静态语义分析
&lt;/h2&gt;&lt;p&gt;采用语法制导翻译生成中间代码&lt;/p&gt;
&lt;h3 id=&#34;1-语法制导翻译简介&#34;&gt;1. 语法制导翻译简介
&lt;/h3&gt;&lt;p&gt;（1）语法与语义的关系&lt;/p&gt;
&lt;p&gt;语法是指语言的结构、即语言的“样子”；
语义是指附着于语言结构上的实际含意，即语言的“意义”.
一个语法上正确的句子，它所代表的意义并不一定正确.&lt;/p&gt;
&lt;p&gt;☆ &lt;strong&gt;语义分析的作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;• 检查结构正确的句子所表示的意思是否合法；
• 执行规定的语义动作，如：表达式求值、符号表的查询/填写、中间代码生成等&lt;/p&gt;
&lt;p&gt;☆ 应用最广的 &lt;strong&gt;语义分析方法&lt;/strong&gt; 是语法制导翻译，他的 &lt;strong&gt;基本思想&lt;/strong&gt; 是将语言结构的语义以 &lt;strong&gt;属性&lt;/strong&gt; 的形式赋予代表此结构的文法符号，而属性的计算以 &lt;strong&gt;语义规则&lt;/strong&gt; 的形式赋予由文法符号组成的产生式.&lt;/p&gt;
&lt;p&gt;（2）属性/语义规则的定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义4.1 对于产生式A→α，其中α是由文法符号X1X2...Xn组成的序列，它的语义规则可以表示为(4.1)所示关于属性的函数f：
          b := f(c1, c2, ..., ck)                  (4.1)
语义规则中的属性存在下述性质与关系：
      (1)   称(4.1)中属性b依赖于属性c1, c2, ..., ck。
      (2) 若b是A的属性，c1, c2, ..., ck是α中文法符号的属性，或者A的其它属性，则称b是A的综合属性。
      (3) 若b是α中某文法符号Xi的属性，c1, c2, ..., ck是A的属性，或者是α中其它文法符号的属性，则称b是Xi的继承属性。
      (4) 若语义规则的形式如下述(4.2)，则可将其想像为产生式左部文法符号A的一个虚拟属性。属性之间的依赖关系，在虚拟属性上依然存在。
          f(c1, c2, ..., ck)                (4.2)          ■
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;☆ 继承属性从前辈和兄弟的属性计算得到,综合属性从子孙和自身的其他属性计算得到.&lt;/p&gt;
&lt;p&gt;即,&lt;code&gt;继承属性&lt;/code&gt;&amp;ldquo;自上而下,包括兄弟&amp;rdquo;,&lt;code&gt;综合属性&lt;/code&gt;&amp;ldquo;自下而上,包括自身&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;（3）语义规则的两种形式&lt;/p&gt;
&lt;p&gt;☆ 语义规则的两种形式（忽略实现细节，二者作用等价）&lt;/p&gt;
&lt;p&gt;&amp;lt;1&amp;gt; 语法制导定义(Syntax Directed Definition)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用抽象的属性和运算表示的语义规则；(公式，做什么)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 翻译方案(Translation Scheme)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用具体的属性和运算表示的语义规则。(程序段，如何做)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;☆ &lt;code&gt;继承属性&lt;/code&gt;是自上而下计算的，&lt;code&gt;综合属性&lt;/code&gt;是自下而上计算的.&lt;/p&gt;
&lt;p&gt;（4）LR分析翻译方案的设计&lt;/p&gt;
&lt;p&gt;☆ LR分析中的语法制导翻译实质上是对LR语法分析的扩充：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;扩充LR分析器的功能&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当执行 &lt;code&gt;归约产生式&lt;/code&gt;的动作时，也执行相应产生式对应的 &lt;code&gt;语义动作&lt;/code&gt;。由于是归约时执行语义动作，&lt;/p&gt;
&lt;p&gt;因此限制语义动作仅能放在产生式右部的 &lt;code&gt;最右边&lt;/code&gt;；&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;扩充分析栈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;增加一个与 &lt;code&gt;分析栈&lt;/code&gt;并列的 &lt;code&gt;语义栈&lt;/code&gt;，用于存放分析栈中文法符号所对应的 &lt;code&gt;属性值&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;☆ 扩充后的LR分析最适合对综合属性的计算，而对于继承属性的计算还需要进行适当的处理.&lt;/p&gt;
&lt;h3 id=&#34;2-中间代码简介&#34;&gt;2. 中间代码简介
&lt;/h3&gt;&lt;p&gt;☆ 中间代码应具备的特性
1）便于语法制导翻译
2）既与机器指令的结构相近,又与具体机器无关.&lt;/p&gt;
&lt;p&gt;使用中间代码的好处:一是便于编译器程序的开发和移植,二是代码进行优化处理.&lt;/p&gt;
&lt;p&gt;☆ 中间代码的主要形式：后缀式、树、三地址码等.最基本的中间代码形式是树🌲；最常用的中间代码形式是三地址码，它的实现形式常采用四元式形式。&lt;/p&gt;
&lt;p&gt;☆ 符号表是帮助声明语句实现存储空间分配的重要数据结构。&lt;/p&gt;
&lt;p&gt;（1）后缀式&lt;/p&gt;
&lt;p&gt;操作数在前，操作符紧随其后，无需用括号限制运算的优先级和结合性；便于求值.&lt;/p&gt;
&lt;p&gt;（2）三地址码&lt;/p&gt;
&lt;p&gt;① 三元式 形式： (i) (op, arg1, arg2)&lt;/p&gt;
&lt;p&gt;三地址码：(i):= arg1 op arg2&lt;/p&gt;
&lt;p&gt;序号的双重含义：既代表此三元式，又代表三元式存放的结果&lt;/p&gt;
&lt;p&gt;存放方式：数组结构，三元式在数组中的位置由下标决定&lt;/p&gt;
&lt;p&gt;弱点：给代码的 &lt;code&gt;优化&lt;/code&gt;带来困难&lt;/p&gt;
&lt;p&gt;② 四元式 形式： ( i ) (op，arg1，arg2，result)&lt;/p&gt;
&lt;p&gt;所表示的计算： result:= arg1 op arg2&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;四元式与三元式的唯一区别：将由序号所表示的运算结果改为：用(临时)变量来表示。&lt;/li&gt;
&lt;li&gt;此改变使得四元式的运算结果与其在四元式序列中的位置无关.为代码的优化提供了极大方便，因为这样可以删除或移动四元式而不会影响运算结果.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;③ 树形表示&lt;/p&gt;
&lt;p&gt;1&amp;gt; 语法树真实反映句子结构，对语法树稍加修改（加入语义信息），即可以作为中间代码的一种形式(注释语法树)
2&amp;gt; 树的优化表示－DAG
3&amp;gt; 树与其他中间代码的关系&lt;/p&gt;
&lt;p&gt;☆ &lt;code&gt;树表示的中间代码&lt;/code&gt;与 &lt;code&gt;后缀式&lt;/code&gt;和 &lt;code&gt;三地址码&lt;/code&gt;之间有内在联系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;树 → 后缀式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法：对树进行 &lt;code&gt;深度优先后序遍历&lt;/code&gt;，得到的线性序列就是 &lt;code&gt;后缀式&lt;/code&gt;，或者说后缀式是树的一个线性化序列；&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;树 → 三元式/四元式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特点：树的每个非叶子节点和它的儿子 &lt;code&gt;对应&lt;/code&gt;一个三元式或四元式；&lt;/p&gt;
&lt;p&gt;方法：对树的非叶子节点进行深度优先后序遍历，即得到一个三元式或四元式序列。&lt;/p&gt;
&lt;h3 id=&#34;3-符号表简介&#34;&gt;3. 符号表简介
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;符号表的作用&lt;/strong&gt; ：连接声明与引用的桥梁，记住每个符号的相关信息，如作用域和类型等，帮助编译的各个阶段正确有效地工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符号表的基本目标：&lt;/strong&gt; 有效记录信息、快速准确查找。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符号表设计的基本要求：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;正确存储各类信息；&lt;/li&gt;
&lt;li&gt;适应不同阶段的需求；&lt;/li&gt;
&lt;li&gt;便于有效地进行查找、插入、删除和修改等操作；&lt;/li&gt;
&lt;li&gt;空间可以动态扩充.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（1）构成名字的字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构成名字的字符串的存储方式：&lt;/strong&gt; 直接存储&amp;mdash;定长数据(直接将构成名字的字符串放在符号表条目中)和间接存储&amp;mdash;变长数据(将构成名字的字符串统一存放在一个大的连续空间内，字符串与字符串之间采用特殊的分隔符隔开，符号表条目中仅存放指向该字符串首字符的指针).&lt;/p&gt;
&lt;p&gt;（2）名字的作用域&lt;/p&gt;
&lt;p&gt;☆ 程序语言范围的划分可以有两种划分范围的方式：&lt;code&gt;并列&lt;/code&gt;和 &lt;code&gt;嵌套&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;☆ &lt;strong&gt;名字的作用域规则：&lt;/strong&gt; 规定一个名字在什么样的范围内应该表示什么意义.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;1&amp;gt; 静态作用域规则（static-scope rule）：编译时就可以确定名字的作用域,即仅从静态读程序就可确定名字的作用域
&amp;lt;2&amp;gt; 最近嵌套规则（most closely nested）：名字的声明在离其最近的内层起作用
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）线性表&lt;/p&gt;
&lt;p&gt;符号表以 &lt;strong&gt;栈(线性表)&lt;/strong&gt; 的方式组织.&lt;/p&gt;
&lt;p&gt;线性表上的操作：查找、插入、删除、修改&lt;/p&gt;
&lt;p&gt;查找：从表头(栈顶)开始，遇到的第一个符合条件的名字；插入：先查找，再加入在表头（栈顶）；&lt;/p&gt;
&lt;p&gt;关键字 = 名字＋作用域；&lt;/p&gt;
&lt;p&gt;（4）散列表&lt;/p&gt;
&lt;p&gt;名字挂在两个链上(便于删除操作)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;散列链(hash link)： 链接所有具有 &lt;code&gt;相同hash值&lt;/code&gt;的元素，表头在表头数组中；&lt;/li&gt;
&lt;li&gt;作用域链(scope link)：链接所有在 &lt;code&gt;同一作用域&lt;/code&gt;中的元素，表头在作用域表中.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;☆ 操作：查找、插入、删除&lt;/p&gt;
&lt;h3 id=&#34;4-声明语句的翻译&#34;&gt;4. 声明语句的翻译
&lt;/h3&gt;&lt;p&gt;（1）变量的声明&lt;/p&gt;
&lt;p&gt;☆ 一个变量的声明应该由两部分来完成：&lt;code&gt;类型的定义&lt;/code&gt;和 &lt;code&gt;变量的声明&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型定义：&lt;/strong&gt; 为编译器提供存储空间大小的信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量声明：&lt;/strong&gt; 为变量分配存储空间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合数据的类型定义和变量声明：&lt;/strong&gt; 定义与声明在一起，定义与声明分离.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1&amp;gt; &lt;code&gt;简单数据类型&lt;/code&gt;的存储空间是预先确定的，如int可以占4个字节，double可以占8个字节，char可以占1个字节等&lt;/p&gt;
&lt;p&gt;2&amp;gt; &lt;code&gt;组合数据类型变量&lt;/code&gt;的存储空间，需要编译器根据程序员提供的信息计算而定.&lt;/p&gt;
&lt;p&gt;（2） 过程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1．过程（procedure）：过程头(做什么) ＋  过程体(怎么做)；
   - 函数:  有返回值的过程
   - 主程序:  被操作系统调用的过程/函数

2．过程的三种形式：过程定义、过程声明和过程调用。
   过程定义：过程头+过程体；
   过程声明：过程头；

3. 左值与右值
   1&amp;gt; 直观上，出现在赋值号左边和右边的量分别称为左值和右值；
   2&amp;gt; 实质上，左值必须具有存储空间，右值可以仅是一个值，而没有存储空间.
   3&amp;gt; 形象地讲，左值是容器，右值是内容.

4. 参数传递
   1&amp;gt; 形参与实参
        - 声明时的参数称为形参(parameter或formal parameter)
        - 引用时的参数称为实参(argument或actual parameter)
   2&amp;gt; 常见的参数传递形式：（不同的语言提供不同的形式）
        - 值调用（call by value）---过程内部对参数的修改，不影响作为实参的变量原来的值.
        - 引用调用（call by reference）--- 过程内部对形参的修改，实质上是对实参的修改.
        - 复写－恢复（copy-in/copy-out）--- ① 过程内对参数的修改不直接影响实参，避免了副作用;
                                        ② 返回时将形参内容恢复给实参，实现参数值的返回.
        - 换名调用（call by name）--- 宏调换
   3&amp;gt; 参数传递方法的本质区别： 实参是代表左值、右值、还是实参本身的正文.

5. 作用域信息的保存
☆ 能够画出嵌套过程的嵌套关系树(P191 4.33),根据语法制导翻译(P193 4.35)画出分析树,写出推导步骤,构造的符号表
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-简单算术表达式与赋值句&#34;&gt;5. 简单算术表达式与赋值句
&lt;/h3&gt;&lt;p&gt;P197 例4.36 主要是变量类型的转换&lt;/p&gt;
&lt;h3 id=&#34;6-数组元素的引用&#34;&gt;6. 数组元素的引用
&lt;/h3&gt;&lt;p&gt;（1）数组元素的地址计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意是行主存储还是列主存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）☆数组元素引用的语法制导翻译(考试热点之一)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P201 例4.37&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-布尔表达式&#34;&gt;7. 布尔表达式
&lt;/h3&gt;&lt;p&gt;布尔表达式的计算有两种方法：数值表示的 &lt;code&gt;直接计算&lt;/code&gt;和逻辑表示的 &lt;code&gt;短路计算&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;☆ 布尔表达式短路计算的翻译：短路计算的控制流，真出口与假出口，真出口链与假出口链，拉链回填技术(P207 例4.41)（考试热点之一）&lt;/p&gt;
&lt;h3 id=&#34;8-控制语句&#34;&gt;8. 控制语句
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;控制语句的分类：&lt;/strong&gt; ①无条件转移、②条件转移、③循环语句、④分支语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无条件转移(goto)\条件转移(if、while)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件转移的语法制导翻译：P213 例4.42&lt;/p&gt;
&lt;p&gt;多看课件PPT，多做题练手&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/eb63d31ad638&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;简书博主 SnorlaxSE - 编译原理知识汇总&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://icourse163.feishu.cn/wiki/NLSjwolTAic4gGkYmhicKJOEnpc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中国大学MOOC 考拉学姐 - 编译原理&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>关于 | About</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/%E5%85%B3%E4%BA%8E-about/</link>
        <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/%E5%85%B3%E4%BA%8E-about/</guid>
        <description>&lt;p&gt;URL： &lt;a class=&#34;link&#34; href=&#34;https://hongyun-yu.github.io/Hugo-dev/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hongyun-yu.github.io/Hugo-dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本博客基于 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/documentation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stake&lt;/a&gt; 主题和Github Pages 部署静态博客，使用 Markdown 作为写作方式。&lt;/p&gt;
&lt;p&gt;部署主要参考了&lt;a class=&#34;link&#34; href=&#34;https://letere-gzj.github.io/hugo-stack/&#34;  title=&#34;点击跳转&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;莱特雷&lt;/a&gt; 的教程和 B 站视频，其他的各种美化也是陆陆续续根据同主题下的大佬来改的&lt;/p&gt;
&lt;p&gt;目前已实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过Aplayer引入音乐播放器，再使用PJAX不刷新加载技术，实现页面切换不中断音乐播放&lt;/li&gt;
&lt;li&gt;背景点线漂移&lt;/li&gt;
&lt;li&gt;博客文章数和总字数统计&lt;/li&gt;
&lt;li&gt;加载进度条&lt;/li&gt;
&lt;li&gt;文章最后更新时间&lt;/li&gt;
&lt;li&gt;随机封面（-已移除）&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://linsnow.cn/posts/bloglab/hugo-stack/modify-hugo/&#34;  title=&#34;点击跳转&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;主题细节调整&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://xrg.fj.cn/p/hugo-stack%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0/#%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;返回顶部&lt;/a&gt;（-暂不满意）&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://yonkov.github.io/post/add-dark-mode-toggle-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深色模式&lt;/a&gt;(-暂未解决)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/lxgw/LxgwWenKai/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;字体更换&lt;/a&gt; - 霞鹜文楷&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>考研-基本常识</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/p/%E8%80%83%E7%A0%94/</link>
        <pubDate>Sat, 15 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/p/%E8%80%83%E7%A0%94/</guid>
        <description>&lt;img src="https://www.helloimg.com/i/2025/02/17/67b3141695089.png" alt="Featured image of post 考研-基本常识" /&gt;&lt;h2 id=&#34;考研基本常识&#34;&gt;考研基本常识
&lt;/h2&gt;&lt;h3 id=&#34;考研届数&#34;&gt;考研届数
&lt;/h3&gt;&lt;p&gt;XX考研（ &lt;strong&gt;研究生入学年份&lt;/strong&gt; ）&lt;/p&gt;
&lt;h3 id=&#34;报名条件&#34;&gt;报名条件
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;考前&lt;/strong&gt;确定学校与专业&lt;/p&gt;
&lt;h3 id=&#34;报考条件&#34;&gt;报考条件
&lt;/h3&gt;&lt;p&gt;本科&lt;strong&gt;双证&lt;/strong&gt; （毕业证、学位证）（应届或毕业后均可）、专科不提&lt;/p&gt;
&lt;h3 id=&#34;考试时间&#34;&gt;考试时间
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;12月中下旬&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;初试考试科目-500分&#34;&gt;初试考试科目 &lt;strong&gt;500分&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;政治（马原、毛中特、习思想、史纲、思修、时政等）	&lt;strong&gt;100分&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;外语（完形填空、阅读、翻译和写作，口语和听力部分在复试考察）&lt;strong&gt;100分&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数学	&lt;strong&gt;150分&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;专业课（408统考 or 自命题） 	&lt;strong&gt;150分&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复试考试科目&#34;&gt;复试考试科目
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;笔试
&lt;ul&gt;
&lt;li&gt;专业知识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面试
&lt;ul&gt;
&lt;li&gt;综合素质、专业素质（主要）&lt;/li&gt;
&lt;li&gt;可能包括自我介绍、各类本科经历（科研、论文和项目）、英语口语听力测试、专业课程和科研知识问答&lt;/li&gt;
&lt;li&gt;（部分情况）加试		上机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复录比：常见 1.2 : 1 、 1.5 : 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;各类分数线&#34;&gt;各类分数线
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;国家线
&lt;ul&gt;
&lt;li&gt;总分和单科达到一定分数才能参加复试&lt;/li&gt;
&lt;li&gt;A类
湖南、湖北、重庆、广东、北京、上海、天津等（21）&lt;/li&gt;
&lt;li&gt;B类总分一般比A类低 10 分左右
广西、贵州、云南等（10）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;院校专业线&lt;/li&gt;
&lt;li&gt;自划线（985院校）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;学硕与专硕&#34;&gt;学硕与专硕
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;培养目标与毕业要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;培养学制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学硕 3 年（通常），专硕 2~3 年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学费&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学硕 8000/年（通常）&lt;/li&gt;
&lt;li&gt;专硕比学硕多，部分情况差距很大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转博&lt;/p&gt;
&lt;img src=&#34;images\image-20250215110500710.png&#34; alt=&#34;image-20250215110500710&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;19-全日制与非全日制的差别&#34;&gt;1.9 全日制与非全日制的差别
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;学习方式&lt;/li&gt;
&lt;li&gt;双证区别&lt;/li&gt;
&lt;li&gt;学费和其他支持
全日制有更多支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;考研信息源&#34;&gt;考研信息源
&lt;/h2&gt;&lt;h3 id=&#34;官方信息源&#34;&gt;官方信息源
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://yz.chsi.com.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中国研究生招生信息网&lt;/a&gt;
&lt;strong&gt;考研官方平台&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;报考院校研究生院官网
&lt;strong&gt;该校考研信息最直接、最权威的渠道&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;报考专业所在院系公众号
个性化信息和数据推送，学长学姐&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非官方信息源&#34;&gt;非官方信息源
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;考研教育机构
信息二道贩子，注意信息交叉验证&lt;/li&gt;
&lt;li&gt;社交媒体与论坛、已上岸的学长学姐
方便的一手经验
bilibili、知乎、小红书、抖音&lt;/li&gt;
&lt;li&gt;实地考察&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.kkdaxue.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;框框大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;考研时间线&#34;&gt;考研时间线
&lt;/h2&gt;&lt;h3 id=&#34;大一大二&#34;&gt;大一大二
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初步认知与目标设定&lt;/li&gt;
&lt;li&gt;学业基础巩固&lt;/li&gt;
&lt;li&gt;参与学术活动与社团&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;大三&#34;&gt;大三
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;考研目标院校与专业
&lt;strong&gt;最终/初步确定&lt;/strong&gt;考研目标院校和专业&lt;/li&gt;
&lt;li&gt;考研复习全面启动&lt;/li&gt;
&lt;li&gt;关注考研资讯与报名准备&lt;/li&gt;
&lt;li&gt;密切&lt;strong&gt;关注考研最新动态&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;考试大纲的发布&lt;/li&gt;
&lt;li&gt;招生简章的更新等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;及时了解&lt;strong&gt;目标招生院校的招生政策变化&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;招生人数是否变化&lt;/li&gt;
&lt;li&gt;考试科目及参考书目是否变动等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;大四&#34;&gt;大四
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;7~9月&lt;/strong&gt;：各校陆续发布招生简章&lt;/p&gt;
&lt;p&gt;看考研院校&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;9(10)月&lt;/strong&gt;：考研政治，英语，数学大纲发布&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;9(10)月&lt;/strong&gt;：网上预报名&lt;/p&gt;
&lt;p&gt;考点选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;10月&lt;/strong&gt;：网上报名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;11月&lt;/strong&gt;：网上/现场确认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;12月中旬&lt;/strong&gt;（初试前十天）:打印准考证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;12月下旬&lt;/strong&gt;：考研初试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;次年2月中下旬&lt;/strong&gt;：公布初试成绩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;次年3月（上中下旬）&lt;/strong&gt;：考研国家线，院校专业线，自划线（34所）公布&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;次年3月中下旬~5月&lt;/strong&gt;：考研复试，调剂&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;次年4-6月&lt;/strong&gt;：考研录取&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;择校择专业&#34;&gt;择校择专业
&lt;/h2&gt;&lt;h3 id=&#34;择校主要因素&#34;&gt;择校主要因素
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;学校综合实力
&lt;ul&gt;
&lt;li&gt;学校和学科排名、&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/17880363234&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;学科评估结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学校地理位置
&lt;ul&gt;
&lt;li&gt;地区经济发展水平（实习与就业）&lt;/li&gt;
&lt;li&gt;一/二区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;招生情况
&lt;ul&gt;
&lt;li&gt;招生人数、报录比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复试分数线与复试情况
&lt;ul&gt;
&lt;li&gt;复录比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;兴趣与规划&lt;/li&gt;
&lt;li&gt;本科专业相关性&lt;/li&gt;
&lt;li&gt;科研或对口专业
&lt;ul&gt;
&lt;li&gt;导师 / 课题组的最新科研&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;思考原则&#34;&gt;思考原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;跨考&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;院校（根据复习情况决定）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;专业课考试不公布参考书目（&lt;strong&gt;谨慎&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;招录人数少于 3 人以下（&lt;strong&gt;不考虑&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;院校歧视，专业课压分传统（&lt;strong&gt;不考虑&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;备考要点&#34;&gt;备考要点
&lt;/h2&gt;&lt;h3 id=&#34;备考原则&#34;&gt;备考原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;底层思维
&lt;ul&gt;
&lt;li&gt;为什么要考研&lt;/li&gt;
&lt;li&gt;竞争对手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考前准备
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考研真题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名师课程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;考研博主&lt;/li&gt;
&lt;li&gt;是否报班&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;具体科目&#34;&gt;具体科目
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;政治
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大三暑假甚至 9 ~ 10 月开始&lt;/strong&gt;都可以&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;最新资料&lt;/strong&gt;！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;肖四肖八&lt;/strong&gt;（肖秀荣四套卷、八套卷）是神器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外语&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随时积累&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;词汇量积累要趁早&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数学
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;打好基础&lt;/strong&gt;（微积分、线性代数、概率论与数理统计）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大三越早开始越好&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;专业课
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统考科目可以较早开始&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自命题可以在择校择专业确定后开始&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复试
&lt;ul&gt;
&lt;li&gt;初试后休息后就可以开始&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多方求证，最重要！（上岸学长学姐）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;积累&lt;strong&gt;有效履历&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;热门问题&#34;&gt;热门问题
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;性价比&lt;/li&gt;
&lt;li&gt;导师选择
放养型导师&lt;/li&gt;
&lt;li&gt;本科情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法论材料&#34;&gt;方法论+材料
&lt;/h2&gt;&lt;h3 id=&#34;学硕与专硕对比18&#34;&gt;学硕与专硕对比（1.8）
&lt;/h3&gt;&lt;h3 id=&#34;考公专业推荐&#34;&gt;考公专业推荐
&lt;/h3&gt;&lt;img src=&#34;images\image-20250215110800020.png&#34; alt=&#34;image-20250215110800020&#34; /&gt;
&lt;h3 id=&#34;查找导师信息&#34;&gt;查找导师信息
&lt;/h3&gt;&lt;img src=&#34;images\image-20250215110938246.png&#34; alt=&#34;image-20250215110938246&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;经验分享&#34;&gt;经验分享
&lt;/h3&gt;&lt;img src=&#34;images\image-20250215111725635.png&#34; alt=&#34;image-20250215111725635&#34; /&gt;
&lt;img src=&#34;images\image-20250215112309519.png&#34; alt=&#34;image-20250215112309519&#34; /&gt;
&lt;img src=&#34;images\image-20250215112510539.png&#34; alt=&#34;image-20250215112510539&#34; /&gt;
&lt;img src=&#34;images\image-20250215112838820.png&#34; alt=&#34;image-20250215112838820&#34; /&gt;
&lt;img src=&#34;images\image-20250215112953039.png&#34; alt=&#34;image-20250215112953039&#34; /&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1qwzdY4EqG?spm_id_from=333.788.videopod.sections&amp;amp;vd_source=76a496aa006e07f846fd0bbe5954c92e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一个视频讲透考研的一切！时间线/信息源/初试/复试/政治/外语/数学/专业课/择校/择专业&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Markdown Syntax Guide</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/p/markdown-syntax-guide/</link>
        <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/p/markdown-syntax-guide/</guid>
        <description>&lt;img src="https://hongyun-yu.github.io/Hugo-dev/p/markdown-syntax-guide/cover.jpg" alt="Featured image of post Markdown Syntax Guide" /&gt;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h1 id=&#34;headings&#34;&gt;Headings
&lt;/h1&gt;&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1
&lt;/h1&gt;&lt;h2 id=&#34;h2&#34;&gt;H2
&lt;/h2&gt;&lt;h3 id=&#34;h3&#34;&gt;H3
&lt;/h3&gt;&lt;h4 id=&#34;h4&#34;&gt;H4
&lt;/h4&gt;&lt;h5 id=&#34;h5&#34;&gt;H5
&lt;/h5&gt;&lt;h6 id=&#34;h6&#34;&gt;H6
&lt;/h6&gt;&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph
&lt;/h2&gt;&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes
&lt;/h2&gt;&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br&gt;
— &lt;cite&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables
&lt;/h2&gt;&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Italics&lt;/th&gt;
&lt;th&gt;Bold&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;E&lt;/th&gt;
&lt;th&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td&gt;
&lt;td&gt;Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td&gt;
&lt;td&gt;Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td&gt;
&lt;td&gt;Proin sit amet velit nec enim imperdiet vehicula.&lt;/td&gt;
&lt;td&gt;Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td&gt;
&lt;td&gt;Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks
&lt;/h2&gt;&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces
&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;diff-code-block&#34;&gt;Diff code block
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[dependencies.bevy]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git = &amp;#34;https://github.com/bevyengine/bevy&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rev = &amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;- features = [&amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+ features = [&amp;#34;jpeg&amp;#34;, &amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;list-types&#34;&gt;List Types
&lt;/h2&gt;&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Fruit
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy
&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark
&lt;/h2&gt;&lt;p&gt;&lt;abbr title=&#34;Graphics Interchange Format&#34;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;ALT&lt;/kbd&gt; + &lt;kbd&gt;Delete&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;h2 id=&#34;hyperlinked-image&#34;&gt;Hyperlinked image
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Google&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>计算机网络总复习</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E5%A4%8D%E4%B9%A0/</link>
        <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E5%A4%8D%E4%B9%A0/</guid>
        <description>&lt;img src="https://www.helloimg.com/i/2025/02/08/67a74cc6008c5.jpg" alt="Featured image of post 计算机网络总复习" /&gt;&lt;h2 id=&#34;计算机网络与互联网络&#34;&gt;计算机网络与互联网络
&lt;/h2&gt;&lt;h3 id=&#34;什么是互联网络&#34;&gt;什么是互联网络
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从构成的角度来看&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;互联网络由点和边构成。其中，点包括端系统（涵盖网络应用）以及路由器；边则是链路。简单来说，互联网络其实是网络的网络，众多不同的网络相互连接，形成了一个庞大复杂的体系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从服务的角度来看&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;互联网络是一种能够为应用提供通信服务的通信架构。在这个架构里，有连接且可靠的服务与无连接的不可靠服务相互配合，共同支撑各类应用开展通信服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议&lt;/strong&gt;：指对等层实体在通信过程中所遵循的规则的集合，这一集合可以从&lt;strong&gt;语法、语义及时序&lt;/strong&gt;三个方面去理解。&lt;strong&gt;语法&lt;/strong&gt;规定了数据与控制信息的结构或格式；&lt;strong&gt;语义&lt;/strong&gt;说明了需要发出何种控制信息，完成何种动作以及做出何种响应；&lt;strong&gt;时序&lt;/strong&gt;则明确了事件实现顺序的详细说明。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络边缘&#34;&gt;网络边缘
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络的结构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;网络整体结构分为网络边缘与网络核心两大部分，还涉及接入网络与通信链路。网络边缘包括运行应用的端系统，重点在于 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;端系统中的应用交互方式 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;；网络核心则由路由器组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;网络边缘的应用交互方式 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;：&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C/S 模式（客户端 / 服务器模式）&lt;/strong&gt;：其特点在于，客户端向服务器发起请求，服务器响应请求并为客户端提供服务。服务器往往具备强大的处理能力与丰富的数据资源，客户端则相对轻量化，依赖服务器获取数据与执行复杂运算，常见于网页浏览、邮件收发等应用场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P2P 模式（对等模式）&lt;/strong&gt;：这种模式下，各个端系统地位平等，既可以作为客户端向其他节点请求资源，也能充当服务器为其他节点提供资源。它无需依赖集中式服务器，有较强的扩展性与容错性，常用于文件共享、流媒体直播等应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络的服务&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向连接的服务&lt;/strong&gt;：这类服务在通信前会先建立连接，整个通信过程数据传输稳定、可靠，能保证数据按序到达接收方，不过建立连接与拆除连接会带来额外开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无连接的服务&lt;/strong&gt;：通信时无需事先建立连接，直接发送数据报，传输效率较高，但无法保证数据一定能可靠、有序地到达接收方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络核心&#34;&gt;网络核心
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络核心&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组成&lt;/strong&gt;：网络交换设备，如路由器 + 链路。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：数据交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据交换方式及比较&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分组交换&lt;/strong&gt;：存储转发方式，统计复用。&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;VC（虚电路）&lt;/li&gt;
&lt;li&gt;Datagram（数据报）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线路交换&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;FDM（频分复用）&lt;/li&gt;
&lt;li&gt;TDM（时分复用）&lt;/li&gt;
&lt;li&gt;WDM（波分复用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络接入与物理介质&#34;&gt;网络接入与物理介质
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网络接入是指将端系统连接到边缘路由器的链路或网络。&lt;/li&gt;
&lt;li&gt;住宅接入采用点到点接入方式，具体包括：
&lt;ul&gt;
&lt;li&gt;ADSL（非对称数字用户线路）&lt;/li&gt;
&lt;li&gt;HFC（混合光纤同轴电缆）&lt;/li&gt;
&lt;li&gt;Cable Modem（电缆调制解调器）&lt;/li&gt;
&lt;li&gt;Home Networks（家庭网络）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;机构接入：LAN
&lt;ul&gt;
&lt;li&gt;以太网&lt;/li&gt;
&lt;li&gt;WLAN（无线网）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物理链路（第 0 层）
&lt;ul&gt;
&lt;li&gt;导向型介质（有型，光纤等）&lt;/li&gt;
&lt;li&gt;非导向型介质（无形，电磁波、光信号等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用介质
&lt;ul&gt;
&lt;li&gt;TP 双绞线&lt;/li&gt;
&lt;li&gt;同轴电缆&lt;/li&gt;
&lt;li&gt;光纤&lt;/li&gt;
&lt;li&gt;Radio（电磁波信号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;互联网络结构与-isp&#34;&gt;互联网络结构与 ISP
&lt;/h3&gt;&lt;h4 id=&#34;近似层次型结构&#34;&gt;近似层次型结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;T - 1 ISP&lt;/li&gt;
&lt;li&gt;T - 2 ISP (Regional ISP)&lt;/li&gt;
&lt;li&gt;Local ISP&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isp-之间的连接&#34;&gt;ISP 之间的连接
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对等连接&lt;/li&gt;
&lt;li&gt;IXP（&lt;code&gt;&amp;lt;font style=&amp;quot;color:rgba(0, 0, 0, 0.85);&amp;quot;&amp;gt;&lt;/code&gt;互联网交换点 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内容提供商网络&#34;&gt;内容提供商网络
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在全球部署 DC（数据中心）&lt;/li&gt;
&lt;li&gt;内容提供商网络在多处与各个 ISP 相联&lt;/li&gt;
&lt;li&gt;内容提供商自己部署网络将全球的 DC 相联
&lt;ul&gt;
&lt;li&gt;内容提供商 DC 自己之间的访问，通过自己部署的专网&lt;/li&gt;
&lt;li&gt;用户接入后通过离用户最近的 DC 为之服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分组交换网络中的延迟与丢失&#34;&gt;分组交换网络中的延迟与丢失
&lt;/h3&gt;&lt;h4 id=&#34;延迟的-4-个原因计算font-stylecolordf2a3f---掌握-font&#34;&gt;延迟的 4 个原因（计算）&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt; - 掌握 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;处理延迟&lt;/li&gt;
&lt;li&gt;排队延迟&lt;/li&gt;
&lt;li&gt;传输延迟&lt;/li&gt;
&lt;li&gt;传播延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：n 段，分组 L，R，传播延迟 d 每段如何计算总体延迟；&lt;/p&gt;
&lt;h4 id=&#34;流量强度0-1与排队延迟正相关lar-font-stylecolordf2a3f--掌握-font&#34;&gt;流量强度（0-1，与排队延迟正相关）：La/R &lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;- 掌握 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;排队延迟   依赖**&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;流量强度的公式 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;**；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;丢失原因&#34;&gt;丢失原因：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;缓冲区溢出 + 出错没通过校验&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;吞吐量-font-stylecolor74b602--了解-font&#34;&gt;吞吐量 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt; -了解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;瞬间吞吐量&lt;/li&gt;
&lt;li&gt;平均吞吐量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;瓶颈链路决定了主机之间的吞吐量（从每段链路获得的大致带宽是 1/N，瓶颈链路是所有链路段中获得带宽最小的）。&lt;/p&gt;
&lt;h3 id=&#34;协议层次与服务模型&#34;&gt;协议层次与服务模型
&lt;/h3&gt;&lt;h4 id=&#34;为什么要分层&#34;&gt;为什么要分层
&lt;/h4&gt;&lt;h4 id=&#34;网络比较复杂分层实现比较容易设计调试实现&#34;&gt;网络比较复杂，分层实现比较容易设计、调试、实现。
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;分层：将复杂的网络功能划分成功能明确的层次，&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;上层利用下层提供的服务来实现本层的协议，从而为上层提供更复杂的功能。&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一些术语和概念-font-stylecolor74b602-理解-font&#34;&gt;一些术语和概念 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;-理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;服务、服务访问原语、服务访问点&lt;/li&gt;
&lt;li&gt;面向连接的服务、无连接的服务&lt;/li&gt;
&lt;li&gt;协议、协议数据单元 PDU&lt;/li&gt;
&lt;li&gt;服务（垂直）和协议（水平）之间的关系（区别与联系）
&lt;ul&gt;
&lt;li&gt;服务利用了下层协议的实现，为上层提供服务&lt;/li&gt;
&lt;li&gt;协议的实现依靠下层服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;互联网络分层模型及每一层的功能-font-stylecolor74b602-理解-font&#34;&gt;互联网络分层模型及每一层的功能 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;-理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;网络层（端到端，路由和转发）&lt;/li&gt;
&lt;li&gt;链路层（点到点，帧为单位）&lt;/li&gt;
&lt;li&gt;物理层（物理信号）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装和解封&#34;&gt;封装和解封
&lt;/h4&gt;&lt;h3 id=&#34;历史-font-stylecolor74b602-了解-font&#34;&gt;历史 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;-了解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ARPANET：美国军方资助的分组交换实验网，由于 TCP/IP 架构的包容性、免费使用、架构便于应用创新吸引更多的用户等原因，用户数量、节点数量和应用数量越来越多。&lt;/li&gt;
&lt;li&gt;NSF 建立 ARPANET 的访问网。&lt;/li&gt;
&lt;li&gt;民用网络从军用网络脱开，成为现在的互联网。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;术语：IETF（互联网工程任务组）, ITU(国际电信联盟），IEEE（电气电子工程师协会 ），RFC（请求评论，是一系列关于互联网技术的文件）。&lt;/p&gt;
&lt;h2 id=&#34;应用层&#34;&gt;应用层
&lt;/h2&gt;&lt;p&gt;原理 + 应用实例 + SOCKET 编程&lt;/p&gt;
&lt;p&gt;应用的开发只集中在端系统上，对路由器没有任何改变，这鼓励了互联网架构下的应用创新。&lt;/p&gt;
&lt;h3 id=&#34;网络应用原理&#34;&gt;网络应用原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应用架构&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;C/S（客户端 / 服务器）&lt;/li&gt;
&lt;li&gt;P2P（对等网络）&lt;/li&gt;
&lt;li&gt;混合架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程间通信&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;同主机：操作系统定义的通信方法&lt;/li&gt;
&lt;li&gt;不同主机：利用网络提供的架构（Socket）交换报文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOCKET&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个整数，OS 用于标示应用通信关系所采用的本地标示&lt;/li&gt;
&lt;li&gt;**TCP：**连接的本地标示&lt;/li&gt;
&lt;li&gt;**UDP：**端节点的本地标示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程编址&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I&lt;strong&gt;P + PORT&lt;/strong&gt;（本质上在传输层应用了端口号，用于区分应用，TCP 和 UDP 使用端口号的方式不同）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用所需要的服务需要考虑的因素（网络所提供服务的主要指标）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;丢失率可靠性&lt;/li&gt;
&lt;li&gt;延迟、延迟差（抖动）&lt;/li&gt;
&lt;li&gt;带宽&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输层协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP 提供的服务特性&lt;/strong&gt;：可靠字节流服务，面向连接，流量控制，拥塞控制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP 提供的服务特性&lt;/strong&gt;：无连接，不可靠的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;都能够提供进程的标示，区分不同的进程&lt;/p&gt;
&lt;h3 id=&#34;web-和-http&#34;&gt;WEB 和 HTTP
&lt;/h3&gt;&lt;h4 id=&#34;web-应用包括&#34;&gt;WEB 应用包括
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;HTTP 协议&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CLIENT（客户端），SERVER（服务器）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;术语&#34;&gt;术语
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;网页&lt;/li&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;引用 URL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;font-stylecolordf2a3fhttp-协议-font&#34;&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;HTTP 协议 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义了 C（客户端）和 S（服务器）之间通信的报文格式、解释和时序。&lt;/li&gt;
&lt;li&gt;HTTP 连接
&lt;ul&gt;
&lt;li&gt;持续性连接&lt;/li&gt;
&lt;li&gt;非持续性连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;往返延迟 RTT 和对象的抓取时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;font-stylecolordf2a3fhttp-10-到-http-11-再到-http-20-的演变-font&#34;&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;HTTP 1.0 到 HTTP 1.1 再到 HTTP 2.0 的演变 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;h5 id=&#34;http-10&#34;&gt;HTTP 1.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基本特点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无状态协议&lt;/strong&gt;：每个请求都是独立的，服务器不会在不同请求之间保留状态信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单的请求 - 响应模型&lt;/strong&gt;：客户端发起请求，服务器响应请求，一次请求对应一次响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种请求方法&lt;/strong&gt;：如 GET、POST、HEAD 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接管理效率低&lt;/strong&gt;：每对请求 - 响应都需要建立一个新的 TCP 连接，这导致了较高的连接建立开销，特别是在请求大量小文件时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏对缓存的充分支持&lt;/strong&gt;：缓存机制比较简单，没有很好地处理资源更新和验证的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;http-11&#34;&gt;HTTP 1.1
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;改进之处&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;持久连接（Keep - Alive）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;允许在一个 TCP 连接上进行多次请求 - 响应交互，减少了建立连接的开销。&lt;/li&gt;
&lt;li&gt;客户端和服务器可以通过 &lt;code&gt;Connection: keep - alive&lt;/code&gt;头字段来协商保持连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管道化（Pipelining）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;允许客户端在等待第一个请求的响应时，发送第二个请求，进一步提高了性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强的缓存机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;引入了更多的缓存控制头字段，如 &lt;code&gt;Cache - Control&lt;/code&gt;、&lt;code&gt;ETag&lt;/code&gt;和 &lt;code&gt;If - Modified - Since&lt;/code&gt;等，使得缓存管理更加灵活和高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分块传输编码（Chunked Transfer Coding）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;允许服务器在不知道内容长度的情况下，分块发送响应内容，适用于动态生成内容的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;头部信息冗余&lt;/strong&gt;：每个请求和响应都携带完整的头部信息，在大量请求时，头部数据的传输会造成性能瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;队首阻塞（Head - of - line Blocking）&lt;/strong&gt;：在管道化连接中，如果一个请求被阻塞，后续的请求都要等待，即使后续请求不需要依赖前面被阻塞的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;http-20&#34;&gt;HTTP 2.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;主要特性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二进制分帧层（Binary Framing Layer）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 2.0 将所有传输的信息分割为更小的帧，并对帧进行二进制编码。这使得协议更加紧凑和高效。&lt;/li&gt;
&lt;li&gt;通过帧的形式，实现了在一个 TCP 连接上多路复用多个请求和响应，避免了 HTTP 1.1 中的队首阻塞问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头部压缩（Header Compression）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用 HPACK 算法对头部信息进行压缩，减少了头部数据的传输量。&lt;/li&gt;
&lt;li&gt;对于重复的头部字段，可以只传输差异部分，进一步提高了压缩效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器推送（Server Push）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;服务器可以在客户端没有请求的情况下，主动向客户端推送资源。例如，当客户端请求 HTML 页面时，服务器可以同时推送页面所需的 CSS 和 JavaScript 文件，减少客户端的等待时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能提升&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 2.0 通过上述特性，在网络性能上有了显著提升，特别是在处理大量小资源和高并发请求时表现出色。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从 HTTP 1.0 到 HTTP 1.1 再到 HTTP 2.0，协议不断进化，旨在解决前一版本的性能瓶颈，提高网络传输效率和用户体验。&lt;/p&gt;
&lt;h4 id=&#34;从-ssl-到-http30基于-udp的安全优化过程&#34;&gt;从 SSL 到 HTTP/3.0（基于 UDP）的安全优化过程
&lt;/h4&gt;&lt;h5 id=&#34;sslsecure-sockets-layer安全套接层&#34;&gt;SSL（Secure Sockets Layer，安全套接层）
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;SSL 是一种早期的网络安全协议，用于在客户端和服务器之间建立加密连接，确保数据在传输过程中的保密性、完整性和身份验证。&lt;/li&gt;
&lt;li&gt;它通过握手过程来协商加密算法、密钥交换和身份验证方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;SSL 的握手过程相对复杂，尤其是在早期版本中，这会导致较高的连接建立延迟。&lt;/li&gt;
&lt;li&gt;对于每一个新的连接，都需要重新进行握手，这在高并发场景下会影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性逐渐减弱&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;随着技术的发展，SSL 的一些加密算法和协议漏洞被发现，安全性逐渐不能满足现代网络安全的需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;tlstransport-layer-security传输层安全&#34;&gt;TLS（Transport Layer Security，传输层安全）
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;与 SSL 的关系&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;TLS 是 SSL 的继任者，它在 SSL 的基础上进行了改进和扩展。TLS 的目标与 SSL 相同，即确保网络通信的安全，但在安全性和性能方面有了显著提升。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改进之处&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增强的加密算法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;TLS 采用了更强大和更安全的加密算法，如 AES（Advanced Encryption Standard）等，以应对不断出现的安全威胁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化的握手过程&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;TLS 对握手过程进行了优化，例如引入了会话恢复机制。当客户端和服务器之前已经建立过连接，在一定条件下可以复用之前的会话参数，减少握手时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;http30基于-udp-的-quic-协议&#34;&gt;HTTP/3.0（基于 UDP 的 QUIC 协议）
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;QUIC（Quick UDP Internet Connections）协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/3.0 是基于 QUIC 协议的，而 QUIC 是基于 UDP 的。QUIC 旨在解决 TCP 和 TLS 在性能和安全性方面的一些问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全特性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;集成加密&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QUIC 将加密作为协议的核心部分，从一开始就对数据进行加密，避免了像 TCP + TLS 那样分两步进行加密的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0 - RTT 连接建立（在某些情况下）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QUIC 允许在某些条件下实现 0 - RTT（Round - Trip Time）连接建立。例如，当客户端和服务器之前已经建立过连接并且缓存了相关的加密参数时，客户端可以立即发送应用数据，无需等待握手过程完成，大大减少了连接建立延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前向纠错（Forward Error Correction，FEC）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QUIC 采用了 FEC 技术，通过在数据中添加冗余信息来恢复在传输过程中丢失的数据，减少了因丢包导致的数据重传，提高了传输效率和安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从 SSL 到 HTTP/3.0（基于 UDP）的演变过程，是一个不断优化安全性能和网络传输效率的过程。HTTP/3.0 通过基于 UDP 的 QUIC 协议，在安全和性能方面都有了显著的提升。&lt;/p&gt;
&lt;h4 id=&#34;报文格式&#34;&gt;报文格式
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_45951891/article/details/134217064&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wireshark——抓包分析_wireshark抓包数据怎么看-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求报文
&lt;ul&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;响应报文
&lt;ul&gt;
&lt;li&gt;状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cookieshttp无状态-有状态&#34;&gt;COOKIES（HTTP无状态-&amp;gt;有状态）
&lt;/h4&gt;&lt;h4 id=&#34;web-缓存&#34;&gt;WEB 缓存
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用：通过本地命中，减少这些对象的访问延迟；进一步减少接入链路的流量强度，从而降低派对延迟带来总体平均延迟的减少；减轻服务器的负担。&lt;/li&gt;
&lt;li&gt;优点：通过一个实例，计算不要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ftp-font-stylecolor74b602不要求font&#34;&gt;FTP &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（不要求）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;作用：在 CS 之间传输文件。&lt;/li&gt;
&lt;li&gt;构成：
&lt;ul&gt;
&lt;li&gt;C（客户端）&lt;/li&gt;
&lt;li&gt;S（服务器）&lt;/li&gt;
&lt;li&gt;FTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FTP 的连接
&lt;ul&gt;
&lt;li&gt;控制连接（带外传输）&lt;/li&gt;
&lt;li&gt;数据连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令和响应&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;email&#34;&gt;EMAIL
&lt;/h3&gt;&lt;h4 id=&#34;电子邮件应用的构成&#34;&gt;电子邮件应用的构成
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用户代理&lt;/li&gt;
&lt;li&gt;邮件服务器&lt;/li&gt;
&lt;li&gt;SMTP（简单邮件传输协议）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;邮件报文格式解析&#34;&gt;邮件报文格式解析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;报文头&lt;/li&gt;
&lt;li&gt;报文体&lt;/li&gt;
&lt;li&gt;MIME（多用途互联网邮件扩展）：邮件多媒体扩展，可以在邮件中编解码多媒体内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;邮件存取协议&#34;&gt;邮件存取协议
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用&lt;/li&gt;
&lt;li&gt;常用
&lt;ul&gt;
&lt;li&gt;IMAP（互联网邮件访问协议）&lt;/li&gt;
&lt;li&gt;POP3（邮局协议版本 3）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns&#34;&gt;DNS
&lt;/h3&gt;&lt;h4 id=&#34;dns-作用&#34;&gt;DNS 作用
&lt;/h4&gt;&lt;p&gt;完成域名到 IP 地址的转换（还包括别名到正规名字、邮件服务器名字到正规名字转换等），是应用层面的互联网 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;基础设施 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;，其他应用使用。&lt;/p&gt;
&lt;h4 id=&#34;二dns-的概念&#34;&gt;二、DNS 的概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;分布式、层次数据库&lt;/li&gt;
&lt;li&gt;命名是分层的&lt;/li&gt;
&lt;li&gt;域名信息存储和服务是分布式的，每个域名服务器担任一个区域 ZONE 的名字到 IP 地址的权威转换，也缓存名字 - IP 信息的转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三dns-的构成&#34;&gt;三、DNS 的构成
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解析器：本地应用&lt;/li&gt;
&lt;li&gt;域名服务器&lt;/li&gt;
&lt;li&gt;DNS 协议
&lt;ul&gt;
&lt;li&gt;报文：请求和应答格式相同&lt;/li&gt;
&lt;li&gt;RR：资源记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;域名解析的过程&#34;&gt;域名解析的过程
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;(解析器 -&amp;gt; 本地 DNS 服务器 -&amp;gt; 上层域名服务器 -&amp;gt;&amp;hellip;-&amp;gt; 权威名字服务器，返回)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地域名服务器、权限域名服务器、顶级域名服务器、根域名服务器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归解析：如果主机所询问的本地域名服务器不知道被查询的域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其它根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是报错，表示无法查询到所需的IP地址。&lt;/li&gt;
&lt;li&gt;迭代解析：当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地服务器进行后续的查询。根域名服务器通常是把自己知道的顶级域名服务器的IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本地域名服务器的查询请求后，要么给出所要查询的IP地址，要么告诉本地服务器下一步应当向哪一个权限域名服务器进行查询。最后，知道了所要解析的IP地址或报错，然后把这个结果返回给发起查询的主机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2025/png/42840982/1736144525748-a7a35972-1aeb-4e16-acae-ca23c1300d01.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;dns-缓存&#34;&gt;DNS 缓存
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用&lt;/li&gt;
&lt;li&gt;本地缓存 + 服务器缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;p2p-font-stylecolor74b602了解p2p-的概念和优势即可font&#34;&gt;P2P &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（了解P2P 的概念和优势即可）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h3&gt;&lt;h4 id=&#34;p2p-概念&#34;&gt;P2P 概念
&lt;/h4&gt;&lt;p&gt;每个对等体即是客户端又是服务器；P2P 网络是这些 peer 构成的应用层面的逻辑网络。&lt;/p&gt;
&lt;h4 id=&#34;p2p-网络比-cs-方式分发内容快的原因&#34;&gt;P2P 网络比 C/S 方式分发内容快的原因
&lt;/h4&gt;&lt;p&gt;这些 peer 节点参与到内容的上载，流量和服务都是分布式的，可扩展性。&lt;/p&gt;
&lt;h4 id=&#34;典型-p2p-应用及其原理-font-stylecolor74b602不要求font&#34;&gt;典型 P2P 应用及其原理 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（不要求）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Napster：知道名词&lt;/li&gt;
&lt;li&gt;Gnutella：知道名词&lt;/li&gt;
&lt;li&gt;KaZaA：知道名词&lt;/li&gt;
&lt;li&gt;BT：知道名字&lt;/li&gt;
&lt;li&gt;DHT：&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;视频流化服务和-cdn-font-stylecolor74b602了解font&#34;&gt;视频流化服务和 CDN &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（了解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h3&gt;&lt;h4 id=&#34;服务器向客户端进行视频流化的方式&#34;&gt;服务器向客户端进行视频流化的方式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;UDP 流化&lt;/li&gt;
&lt;li&gt;http 流化&lt;/li&gt;
&lt;li&gt;DASH（Dynamic, Adaptive Streaming over HTTP）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dash-流化的过程&#34;&gt;DASH 流化的过程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;客户端获取告示文件&lt;/li&gt;
&lt;li&gt;客户端按照情况，向（可能是不同的）服务器请求不同视频质量的内容块，客户端智能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cdn&#34;&gt;CDN
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;单个服务器，或者服务器群向客户端提供海量内容并发服务的问题：扩展性差&lt;/li&gt;
&lt;li&gt;CDN 原理
&lt;ul&gt;
&lt;li&gt;应用层面的协作服务网络&lt;/li&gt;
&lt;li&gt;在全网部署缓存节点，内容预先部署到 CDN 缓存节点上&lt;/li&gt;
&lt;li&gt;用户请求通过域名解析重定向向离自己 “最近的节点” 请求内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存节点放置的方式
&lt;ul&gt;
&lt;li&gt;Enter Deep&lt;/li&gt;
&lt;li&gt;Bring Home&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-的-socket-编程-font-stylecolor74b602理解-font&#34;&gt;TCP 的 SOCKET 编程 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h3&gt;&lt;h4 id=&#34;socket-概念&#34;&gt;SOCKET 概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TCP 连接的本地标示示，向这个 SOCKET 写就是发送给对方的进程；从 SOCKET 中读，就是读取对方发送过来的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;socket-api&#34;&gt;SOCKET API
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建&lt;/li&gt;
&lt;li&gt;使用（读和写）&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-socket-数据传输的特点&#34;&gt;TCP SOCKET 数据传输的特点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;面向连接，可靠字节流服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-socket-编程&#34;&gt;TCP SOCKET 编程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建立 SOCKET&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;客户端 TCP 实体动作：和服务器端的 TCP 实体握手沟通。&lt;/li&gt;
&lt;li&gt;服务器端的动作&lt;/li&gt;
&lt;li&gt;三次握手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 SOCKET&lt;/li&gt;
&lt;li&gt;关闭 SOCKET&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp-的-socket-编程-font-stylecolor74b602理解-font&#34;&gt;UDP 的 SOCKET 编程 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UDP SOCKET数据传输的特点&lt;/li&gt;
&lt;li&gt;编程 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt; 不要求 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;建立SOCKET（之前客户端 UDP 实体和服务器不用握手，不为之后的通信做准备）&lt;/li&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;传输层&#34;&gt;传输层
&lt;/h2&gt;&lt;h3 id=&#34;传输层服务&#34;&gt;传输层服务
&lt;/h3&gt;&lt;h4 id=&#34;传输服务&#34;&gt;传输服务
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;能够使端系统应用之间进行逻辑通信。&lt;/li&gt;
&lt;li&gt;传输协议：运行于端系统的 2 个对等传输层实体相互通信应该遵守的规则集合。&lt;/li&gt;
&lt;li&gt;传输服务和网络服务的区别
&lt;ul&gt;
&lt;li&gt;网络服务：主机到主机的通信。&lt;/li&gt;
&lt;li&gt;传输服务：进程到进程的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;互联网络传输层协议&#34;&gt;互联网络传输层协议
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TCP：有连接，可靠保序数传服务。&lt;/li&gt;
&lt;li&gt;UDP：无连接，不可靠，不保序的数传服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复用与解复用&#34;&gt;复用与解复用
&lt;/h3&gt;&lt;h4 id=&#34;复用&#34;&gt;复用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;源端多个上层应用收集数据：应用报文，封装报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解复用&#34;&gt;解复用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;接收端将数据按照端口号（结合 IP 地址）给相应的 SOCKET 对应的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复用和解复用的工作原理ip-port&#34;&gt;复用和解复用的工作原理：IP PORT
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TCP 有连接情况：SOCKETS 为 4 元组。&lt;/li&gt;
&lt;li&gt;UDP 无连接情况：SOCKETS 为 2 元组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无连接传输层协议-udp&#34;&gt;无连接传输层协议 UDP
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UDP 的必要性&lt;/strong&gt;：有些应用对实时性比较在乎，对可靠性要求不高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP 报文（无连接的，因此叫做 UDP 数据报）格式&lt;/strong&gt;。（头部 + 载荷）&lt;/li&gt;
&lt;li&gt;**UDP 报文校验和的计算（Check Sum）  **&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可靠数据传输原理&#34;&gt;可靠数据传输原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议演进的方式讲解如何进行 rdt&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;加入一些假设，简单的协议可以提供 rdt 服务。&lt;/li&gt;
&lt;li&gt;去掉一些假设，需要协议实体做相应的变化从而能够进行 rdt。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**技术机制 ** &lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;校验和，正向确认，反向确认。&lt;/li&gt;
&lt;li&gt;序号：检查重复。&lt;/li&gt;
&lt;li&gt;只有正向确认的机制。&lt;/li&gt;
&lt;li&gt;检错重发和超时重发：处理丢失。
&lt;ul&gt;
&lt;li&gt;滑动窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;font-stylecolordf2a3frdtreliable-data-transfer可靠数据传输102030-的功能特点-font&#34;&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;RDT（Reliable Data Transfer，可靠数据传输）1.0、2.0、3.0 的功能特点 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_39583450/article/details/113481150&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算机网络（14）——可靠数据传输原理_rdt3.0接收方fsm-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;rdt-10&#34;&gt;RDT 1.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解决错误问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RDT 1.0 假设底层信道完全可靠，不会出现比特差错，也不会丢失分组。&lt;/li&gt;
&lt;li&gt;在这种理想情况下，发送方只需将数据发送出去，接收方就能无误地接收到数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;发送方：简单地将数据发送给接收方，无需考虑数据是否丢失或损坏。&lt;/li&gt;
&lt;li&gt;接收方：接收数据并进行处理，不需要反馈机制来确认数据是否正确接收。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;rdt-20&#34;&gt;RDT 2.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解决序号 / 时序问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RDT 2.0 考虑到了底层信道可能出现比特差错的情况，但仍然假设分组不会丢失。&lt;/li&gt;
&lt;li&gt;为了检测和纠正错误，引入了差错检测码（如校验和）和确认（ACK）与否认（NAK）机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;发送方：
&lt;ul&gt;
&lt;li&gt;发送带有差错检测码的数据分组。&lt;/li&gt;
&lt;li&gt;等待接收方的 ACK 或 NAK 反馈。如果收到 ACK，则继续发送下一个分组；如果收到 NAK，则重发当前分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收方：
&lt;ul&gt;
&lt;li&gt;接收数据分组并检查差错检测码。&lt;/li&gt;
&lt;li&gt;如果数据无误，发送 ACK 给发送方；如果检测到错误，发送 NAK 给发送方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;rdt-30&#34;&gt;RDT 3.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解决超时 / 重复问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RDT 3.0 在 RDT 2.0 的基础上，进一步考虑了分组可能丢失的情况。&lt;/li&gt;
&lt;li&gt;为了处理分组丢失问题，引入了定时器机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;发送方：
&lt;ul&gt;
&lt;li&gt;发送数据分组后启动定时器。&lt;/li&gt;
&lt;li&gt;如果在定时器超时前收到 ACK，则取消定时器并发送下一个分组。&lt;/li&gt;
&lt;li&gt;如果定时器超时，无论是否收到 NAK，都重发当前分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收方：
&lt;ul&gt;
&lt;li&gt;与 RDT 2.0 类似，接收数据分组，检查差错检测码，发送 ACK 或 NAK。&lt;/li&gt;
&lt;li&gt;如果收到重复的分组（由于发送方超时重发），仍然发送 ACK 给发送方，以避免发送方不断重发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;RDT 协议从 1.0 到 3.0 不断演进，逐步解决了可靠数据传输过程中的各种实际问题，从假设理想信道到考虑比特差错、分组丢失等情况，通过增加差错检测、确认机制、定时器等手段来确保数据的可靠传输。&lt;/p&gt;
&lt;h4 id=&#34;利用率计算-font-stylecolor74b602-了解-font&#34;&gt;利用率计算 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt; 了解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;停止等待技术：链路带宽延迟积（容量）效率低。
管道技术：在未经对方确认的情况下，可以连续发送多个 PDU。
GBN：发送窗口大于 1，接收窗口 = 1（只能顺序接收；发送方只设置一个超时定时器，一旦出错，返回到出错的那一个 PDU 重发）。
SR：发送窗口大于 1，接收窗口大于 1（能够乱序接收；发送方为每个发送出去的 PDU 设置超时定时器，哪个超时重发哪个）。&lt;/p&gt;
&lt;h3 id=&#34;有连接传输层协议tcp&#34;&gt;有连接传输层协议：TCP
&lt;/h3&gt;&lt;h4 id=&#34;tcp-服务特性&#34;&gt;TCP 服务特性
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;点对点：可靠保序字节流；管道（在未加确认情况下一次次传多个未经确认的段）；缓冲；全双工；面向连接；流控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-段结构&#34;&gt;TCP 段结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;各个字段的作用。&lt;/li&gt;
&lt;li&gt;连接建立时协商好双方的起始序号；&lt;/li&gt;
&lt;li&gt;序号是首字节在字节流的偏移量；&lt;/li&gt;
&lt;li&gt;确认：是对顺序收到的最后一个字节 + 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rtt-时间估计和重发超时时间估计&#34;&gt;RTT 时间估计和重发超时时间估计
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;移动平均计算&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;平均往返延迟。&lt;/li&gt;
&lt;li&gt;当前往返延迟采样值与平均值的偏差。&lt;/li&gt;
&lt;li&gt;平均值 + 4 偏差。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-的可靠数据传输原理&#34;&gt;TCP 的可靠数据传输原理
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;快速重传&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在没有超时情况下，收到对方对于某一个段的重复三次（一共 4 个）ACK。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;流量控制&#34;&gt;流量控制
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;流控目的&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;防止淹没接收方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流控手段&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;将接收窗口大小捎带方式传递给发送端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-连接管理-font-stylecolor74b602-理解-font&#34;&gt;TCP 连接管理 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt; 理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;连接建立&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;3 次握手技术，对双方选择的初始序号给予确认，准备好缓冲区。&lt;/li&gt;
&lt;li&gt;第一次握手：SYN = 1，ACK = 0：发起端的序号。&lt;/li&gt;
&lt;li&gt;第二次握手：&lt;code&gt;syn = 1&lt;/code&gt;，&lt;code&gt;ack = 1&lt;/code&gt;，被呼叫方的序号。&lt;/li&gt;
&lt;li&gt;第三次握手：&lt;code&gt;(syn = 0) ack = 1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接拆除&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;存在 2 军问题不完美（也不存在完美释放连接的方案，用定时器凑合解决）。&lt;/li&gt;
&lt;li&gt;连接状态及其变迁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;拥塞控制原理&#34;&gt;拥塞控制原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;拥塞的概念&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;解释什么是拥塞，以及为什么会发生拥塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制目的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制手段&lt;/strong&gt;**&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;  理解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;**
&lt;ul&gt;
&lt;li&gt;端到端的拥塞控制：&lt;strong&gt;TCP&lt;/strong&gt; 采用这种方式。&lt;/li&gt;
&lt;li&gt;网络辅助的拥塞控制：&lt;strong&gt;ATM&lt;/strong&gt; 网络标志和携带拥塞信息，反馈给主机 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（不要求）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tcp-的拥塞控制原理&#34;&gt;TCP 的拥塞控制原理
&lt;/h3&gt;&lt;h4 id=&#34;tcp-拥塞控制原理-font-stylecolordf2a3f需掌握font&#34;&gt;TCP 拥塞控制原理 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;（需掌握）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检测拥塞&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;超时（拥塞，存在误判的可能性，但概率比较低）。&lt;/li&gt;
&lt;li&gt;三个冗余 ACK（轻微拥塞）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;AIMD（加性增 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#F1A2AB;&amp;quot;&amp;gt;&lt;/code&gt;1 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;、乘性减 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#F1A2AB;&amp;quot;&amp;gt;&lt;/code&gt;半 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;）、慢启动 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#F1A2AB;&amp;quot;&amp;gt;&lt;/code&gt;（加倍）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;、超时之后的保守策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-拥塞控制的-2-种算法&#34;&gt;TCP 拥塞控制的 2 种算法
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Tahoe&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;超时事件和 3 个冗余 ACK 处理一样的，不要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reno 算法&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;（需掌握）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;超时事件发生和 3 个冗余 ACK 处理不一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;平均延迟和超时定时器时间的设置&#34;&gt;平均延迟和超时定时器时间的设置
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;**JACSON 算法（具体初始化和迭代算法， ** &lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;不要求 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;平均往返延迟公式。&lt;/li&gt;
&lt;li&gt;Dev 算法：第一个超时时间 = 延迟的 1/2，初值设置；后面按公式。&lt;/li&gt;
&lt;li&gt;超时时间设置：es + 4dev。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-公平性font-stylecolor74b602了解-font&#34;&gt;TCP 公平性：&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;了解 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;h4 id=&#34;tcp-的吞吐量计算font-stylecolor74b602不要求-font&#34;&gt;TCP 的吞吐量计算：&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;不要求 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;。
&lt;/h4&gt;&lt;h2 id=&#34;网络层之数据平面&#34;&gt;网络层之数据平面
&lt;/h2&gt;&lt;h3 id=&#34;简介&#34;&gt;简介
&lt;/h3&gt;&lt;h4 id=&#34;网络层的主要服务和功能&#34;&gt;网络层的主要服务和功能
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;服务&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;向传输层提供主机到主机的段传输服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能 1—— 转发，数据平面功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;从路由器的一个端口流入，从另外一个端口流出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能 2—— 路由，控制平面的功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;决定从源到目的的路径。&lt;/li&gt;
&lt;li&gt;两个功能相互配合将数据报从源传送到目标主机；关联是转发表、流表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;实现网络层功能的两种方式&#34;&gt;实现网络层功能的两种方式
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;传统方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;控制平面和数据平面功能垂直集成在每个设备上（路由器）。&lt;/li&gt;
&lt;li&gt;控制平面功能：路由协议实体分布式地计算路由表。&lt;/li&gt;
&lt;li&gt;数据平面的功能：IP 协议按照路由表进行分组的转发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDN 通用转发方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;控制平面和数据平面分离，在不同设备上实现。&lt;/li&gt;
&lt;li&gt;SDN 控制器集中式计算、下发流表实现控制平面功能。&lt;/li&gt;
&lt;li&gt;SDN 分组交换机按照流表对到来的分组进行转发，实现数据平面的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;网络层提供服务的一些重要指标&#34;&gt;网络层提供服务的一些重要指标
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;带宽&lt;/li&gt;
&lt;li&gt;延迟、延迟差&lt;/li&gt;
&lt;li&gt;丢包与否&lt;/li&gt;
&lt;li&gt;丢包率&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;路由器结构和工作原理&#34;&gt;路由器结构和工作原理
&lt;/h3&gt;&lt;h4 id=&#34;路由器的-2-大功能-font-stylecolor74b602需理解font&#34;&gt;路由器的 2 大功能 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（需理解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;路由协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;结果形成路由表（转发表）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转发分组&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用转发表转发分组，交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;构成&#34;&gt;构成
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;输入端口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;线路终端实现物理层功能，链路协议实体实现链路层功能，网络层功能实现分布式分组转发。&lt;/li&gt;
&lt;li&gt;最长前缀匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换结构&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;基于内存的，基于 bus 的，基于 CROSSBAR 的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出端口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;网络层可以实现分组的调度：FIFO，RR，WFQ。&lt;/li&gt;
&lt;li&gt;调度支持对多媒体分组等优先级分组的传输支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由处理器&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;控制各部分协调工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;互联网网络层协议&#34;&gt;互联网网络层协议
&lt;/h3&gt;&lt;h4 id=&#34;ip-网络提供的服务模型尽力而为&#34;&gt;IP 网络提供的服务模型：尽力而为
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;包括含义：丢包、乱序、不可靠、（可能包括重复）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;网络层构成&#34;&gt;网络层构成
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;IP 协议、路由选择协议、ICMP 协议&lt;/li&gt;
&lt;li&gt;转发表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 数据报格式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;各个字段的作用&lt;/li&gt;
&lt;li&gt;分片和重组 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;- 掌握 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;一个分组的总体大小超过了转发链路的 MTU，因此要切片。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;到目标主机重组。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 编址&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;IP 地址：主机或路由器和网络接口的标识。&lt;/li&gt;
&lt;li&gt;子网
&lt;ul&gt;
&lt;li&gt;在一个子网内的设备之间的通信有 2 个特点：1）通信无需借助路由器；2）子网前缀一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 地址分类：ABC（单步）  D（多步）  E（预留）&lt;/li&gt;
&lt;li&gt;特殊 IP 地址（内网、全0、全1）&lt;/li&gt;
&lt;li&gt;子网掩码和 CIDR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**NAT ** &lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;不要求 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;DHCP 协议：上网主机获得 IP、掩码、默认网关和 local name server。&lt;/li&gt;
&lt;li&gt;路由聚集：连续的子网前缀的子网可达信息可以做聚集，减少向外部传输路由的数量，减少路由计算的负担。支持大概的路由聚集，与此对应的是最长前缀匹配的措施。&lt;/li&gt;
&lt;li&gt;IPV 6：
&lt;ol&gt;
&lt;li&gt;格式（固定头部长度 40B ），地址：128 bits&lt;/li&gt;
&lt;li&gt;变化（32-&amp;gt;128）&lt;/li&gt;
&lt;li&gt;IPV4 到 IPV6 的迁移
&lt;ol&gt;
&lt;li&gt;隧道&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;通用转发和-sdn&#34;&gt;通用转发和 SDN
&lt;/h3&gt;&lt;h4 id=&#34;sdn-方式控制平面和数据平面分离的优点-font-stylecolor74b602需理解font&#34;&gt;SDN 方式控制平面和数据平面分离的优点 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（需理解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;集中在控制器上实现控制逻辑，网络可编程，可以实现各种复杂的网络功能、新功能（一次部署，持续升级）、方便管理。&lt;/li&gt;
&lt;li&gt;形成开发生态（控制器、分组交换机、网络应用，在一个开放的框架下协作）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;sdn-分组交换机按照计算出的流表进行分组转发通用便于升级&#34;&gt;SDN 分组交换机按照计算出的流表进行分组转发、通用、便于升级。
&lt;/h4&gt;&lt;h5 id=&#34;分组交换机工作原理-font-stylecolor74b602需理解font&#34;&gt;分组交换机工作原理 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（需理解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;模式匹配 + 行动（不仅仅是转发，还可以组播、泛洪、修改字段和阻塞等）。&lt;/li&gt;
&lt;li&gt;进来分组，按照各级字段匹配流表，按照相应的行动动作分组。&lt;/li&gt;
&lt;li&gt;按照优先权进行判断；之后，统计计数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;网络层之控制平面&#34;&gt;网络层之控制平面
&lt;/h2&gt;&lt;h3 id=&#34;概述&#34;&gt;概述
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;两种方式实现控制平面功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;传统方式：在每个路由器上分布式实现路由功能。&lt;/li&gt;
&lt;li&gt;SDN 方式：在 SDN 控制器上由网络应用集中式计算、生成流表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;路由选择算法&#34;&gt;路由选择算法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;路由目标&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根据收集到的路由信息（拓扑、链路代价等）计算出源到目标较好的路径，代价比较低的路径。&lt;/li&gt;
&lt;li&gt;主机 - 主机的路径 == 路由器到路由器的路径。&lt;/li&gt;
&lt;li&gt;路由目标实际上是计算出节点的汇集树。&lt;/li&gt;
&lt;li&gt;路由原则：完整正确、简单、健壮、稳定公平、最优（次优）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由分类&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;静态和动态（自适应）。&lt;/li&gt;
&lt;li&gt;局部和全局的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_53144843/article/details/121254000&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;路由算法(Dijkstra, Bellman-Ford算法)_bellmanford算法和dijkstra-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;LS 算法（链路状态）&lt;/strong&gt; &lt;strong&gt;（需掌握）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;全局的路由选择算法，工作原理&lt;/li&gt;
&lt;li&gt;每个节点收集邻居信息，生成 LS；LS 全网泛洪。&lt;/li&gt;
&lt;li&gt;节点收集 LS 状态分组，形成网络拓扑。&lt;/li&gt;
&lt;li&gt;按照最短路径算法算出到其他节点的最优路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DV 算法（距离矢量）&lt;/strong&gt; &lt;strong&gt;（需掌握）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;局部的路由选择算法，工作原理&lt;/li&gt;
&lt;li&gt;每个节点维护到所有其他节点的下一跳和代价。&lt;/li&gt;
&lt;li&gt;邻居节点之间定期交换 DV。&lt;/li&gt;
&lt;li&gt;按照 Bellman-Ford 不断迭代生成到所有目标的代价和相应的下一跳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**层次路由 ** &lt;strong&gt;理解&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个平面解决路由的问题：计算、传输和存储路由信息的量太大，不具备可扩展性，也不满足不同网络运营方不同的管理需求&lt;/li&gt;
&lt;li&gt;分成 AS, AS 内部之间的节点路由由&lt;strong&gt;内部网关协议&lt;/strong&gt;解决：AS 之间的路由，分层解决（路由到网关，由网关路由到目标网关（外部网关协议），到了目标 AS 内部，采用 AS 内部的路由解决）&lt;/li&gt;
&lt;li&gt;优势：分层路由，解决了规模性问题，管理性问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;路由算法用于确定数据分组从源节点到目的节点的传输路径，其中静态路由与动态路由是两种重要的路由方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态路由&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：静态路由是由网络管理员手动配置的路由信息。管理员依据网络拓扑结构，明确指定每个目的网络的下一跳路由器或出口接口。例如，在一个小型企业网中，仅有几条固定线路连接不同部门，管理员清楚各部门之间数据该如何流转，就可以手动设置静态路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性高&lt;/strong&gt;：由于路由表是人工定制，外部攻击者较难篡改路由信息，能保障网络的基本架构安全。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低开销&lt;/strong&gt;：不需要额外的路由协议进行路由信息交互，几乎不占用网络带宽与设备资源，适合简单网络拓扑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可预测性强&lt;/strong&gt;：数据传输路径固定，网络管理员能精准预估数据包走向，便于故障排查。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缺乏灵活性&lt;/strong&gt;：网络拓扑一旦变动，像新增节点、链路故障，静态路由无法自动调整，必须人工重新配置，在大型复杂网络里，工作量巨大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置繁琐&lt;/strong&gt;：在大规模网络中，需要为众多目的网络逐个设置路由，容易出错且管理成本飙升。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态路由&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：动态路由依靠路由协议，让路由器之间自动交换网络拓扑和链路状态等信息，随后各自依据特定算法计算出最佳路由。常见的动态路由协议有 RIP、OSPF、BGP 等。例如，在互联网骨干网中，无数的路由器时刻在交互信息，动态更新路由表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自适应网络变化&lt;/strong&gt;：链路故障、网络扩容时，路由器能快速重新计算路由，保障网络畅通，无需人工干预。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置简便&lt;/strong&gt;：只需在路由器上启用相关路由协议，后续路由更新依靠协议自动完成，降低了管理员工作量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;占用资源&lt;/strong&gt;：路由协议持续交互信息，消耗网络带宽；路由器计算路由也占用自身的 CPU、内存资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存在安全风险&lt;/strong&gt;：路由协议传输的信息如果被恶意篡改，会误导网络流量走向，引发网络安全事故。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态路由和动态路由适用于不同的网络场景，简单、稳定的网络更适合静态路由，而复杂多变、规模较大的网络则要依靠动态路由来保障高效的数据传输。&lt;/p&gt;
&lt;h3 id=&#34;互联网的路由协议&#34;&gt;互联网的路由协议
&lt;/h3&gt;&lt;h4 id=&#34;路由协议分类&#34;&gt;路由协议分类
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;内部网关协议 IGP&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RIP&lt;/li&gt;
&lt;li&gt;OSPF：AS 内部支持分层路由，同时支持多种代价。&lt;/li&gt;
&lt;li&gt;IGRP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部网关协议 EGP&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;BGP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;网关路由器参与-as-内部路由计算收集-as-内部子网可达信息&#34;&gt;网关路由器参与 AS 内部路由计算，收集 AS 内部子网可达信息
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;网关路由器通过 AS 间路由向其他 AS 网关通告子网可达信息。&lt;/li&gt;
&lt;li&gt;网关路由器还转发 “过手” 子网可达信息，但是 AS 路径要加上它自己 AS 编号（防止形成环路）。&lt;/li&gt;
&lt;li&gt;网关路由器通过 i - BGP 向 AS 内部所有路由节点通告收集到的子网可达信息。&lt;/li&gt;
&lt;li&gt;内部路由器，通过 AS 内路由和 AS 间路由共同决定向 AS 外部子网的下一跳（内部网关协议决定如何去往网关，外部网关协议决定通过那个网关可到达 AS 外部子网）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;内部网关协议和外部网关协议的对比-font-stylecolor74b602了解font&#34;&gt;内部网关协议和外部网关协议的对比 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（了解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;内部网关协议重视效率，性能。&lt;/li&gt;
&lt;li&gt;外部网关协议重视策略：经济策略和政治策略&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sdn-控制平面&#34;&gt;SDN 控制平面
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在控制器上集中实现控制功能。&lt;/li&gt;
&lt;li&gt;控制器和 SDN 交换机按照 &lt;code&gt;openflow&lt;/code&gt;等南向接口协议等下发流表，上报设备状态。&lt;/li&gt;
&lt;li&gt;SDN 控制器按照北向接口和网络应用打交道。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;icmp-协议-font-stylecolor74b602了解font&#34;&gt;ICMP 协议 &lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（了解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;作用：包括错误、&lt;code&gt;echo&lt;/code&gt;请求和应答。&lt;/li&gt;
&lt;li&gt;报文类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据链路层与局域网&#34;&gt;数据链路层与局域网
&lt;/h2&gt;&lt;h3 id=&#34;引论&#34;&gt;引论
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;链路层提供的服务&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;成帧、链路存取控制（链路访问控制）。&lt;/li&gt;
&lt;li&gt;在相邻节点间进行可靠数据传递。&lt;/li&gt;
&lt;li&gt;流量控制。&lt;/li&gt;
&lt;li&gt;检错。&lt;/li&gt;
&lt;li&gt;纠错。&lt;/li&gt;
&lt;li&gt;全双工和半双工服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链路层网络节点的连接方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;点到点方式：比较适合广域。&lt;/li&gt;
&lt;li&gt;多点连接的方式：比较适合局域、联网方便，但是需要解决 MAC 问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;检错与纠错&#34;&gt;检错与纠错
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检错原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;奇偶校验。&lt;/li&gt;
&lt;li&gt;CRC（循环冗余校验）&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt; - 掌握 &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;原理。&lt;/li&gt;
&lt;li&gt;生成多项式。&lt;/li&gt;
&lt;li&gt;冗余位计算方法以及验证方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多路访问协议&#34;&gt;多路访问协议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAC 的必要性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MAP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信道划分&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TDMA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDMA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CDMA&lt;/strong&gt;：删掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAP：随机访问协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;slotted ALOHA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALOHA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSMA&lt;/strong&gt;，&lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;background-color:#FBF5CB;&amp;quot;&amp;gt;&lt;/code&gt;CSMA/CD（至少 2t 长度帧），CSMA/CA &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轮转协议：不要求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;令牌协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;链路层编地址&#34;&gt;链路层编地址
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAC 地址（48位）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;格式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MAC 地址和网络层 IP 地址的区别&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;层次不同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MAC 地址平面的，用于标示一个物理网络的不同站点；IP 是可以聚集的，便于计算路由&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARP 协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的：物理网络范围内 IP 地址到 MAC 地址的转换&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作原理：广播查询，单播应答&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;以太网&#34;&gt;以太网
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;IEEE802.3 标准，链路层和相应的物理层。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以太网的帧结构。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;向上提供服务的特点。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;无连接：以太网在传输数据时不需要事先建立连接。&lt;/li&gt;
&lt;li&gt;不可靠：数据传输过程中不保证数据的可靠到达。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问控制技术。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSMA/CD&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#DF2A3F;&amp;quot;&amp;gt;&lt;/code&gt;（需掌握）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt;：载波侦听多路访问 / 冲突检测，用于解决以太网中的冲突问题。
&lt;ul&gt;
&lt;li&gt;指数后退：在发生冲突后，设备会采用指数后退算法等待一段时间后再尝试发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**CSMA/CA ** &lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（需理解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt;：载波侦听多路访问 / 冲突避免，适用于无线网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编码。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manchester 编码&lt;/strong&gt;：一种常用的编码方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;hub-和交换机&#34;&gt;HUB 和交换机
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HUB 连接方式的问题。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;无法隔离冲突，在一个冲突域之中：使用 HUB 连接设备时，所有连接的设备处于同一个冲突域，容易产生冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换机的工作原理。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;选择性转发：交换机可以根据目的地址有选择地转发数据。&lt;/li&gt;
&lt;li&gt;自学习：交换机能够自动学习连接设备的 MAC 地址。&lt;/li&gt;
&lt;li&gt;流量隔离：交换机可以隔离不同端口的流量，减少冲突。&lt;/li&gt;
&lt;li&gt;专用接入：交换机提供专用的接入端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由器和交换机的区别&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:#74B602;&amp;quot;&amp;gt;&lt;/code&gt;（需理解）&lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=76a496aa006e07f846fd0bbe5954c92e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://hongyun-yu.github.io/Hugo-dev/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/p/</guid>
        <description>&lt;h2 id=&#34;hugo解析&#34;&gt;Hugo解析
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── archetypes            
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── default.md				# hugo新建文章的默认模板
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── config.yaml                 # 网站配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── content                     # 站点内的内容都在这里
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── categories              # “分类”页面的首页
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── Test                # “分类”页面下的一个具体分类页面
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── page                    # 显示在网站主页左侧边栏菜单的选项（导航栏）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── about               # 左侧边栏菜单中的“关于”页面
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── archives            # 左侧边栏菜单中的“归档”页面
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── links               # 左侧边栏菜单中的“链接”页面
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── search              # 左侧边栏菜单中的“搜索”页面
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── post                    # 用户写的帖子都放在这里，每个子文件夹对应一个帖子
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       ├── 2024
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│            ├── 09
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│                ├── 文章目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│					  ├── .md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│					  ├── .img
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│			 ├── 10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│                ├── 文章目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│					  ├── .md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── layouts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── LICENSE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── resources
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── _gen
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       ├── assets
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       └── images
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── static                     # 放用户自定义字体、用户头像、网站小图标等
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── themes                     # 放各种主题
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── hugo-theme-stack       # stack主题
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── archetypes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── assets
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── debug.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── exampleSite
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── go.mod
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── i18n
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── images
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── layouts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── LICENSE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── netlify.toml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        └── theme.toml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;最后修改时间问题&#34;&gt;最后修改时间问题
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://i-square.github.io/p/hugo-upgrade-and-hugo-theme-stack-modify-and-last-modified-time/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;记录hugo升级、hugo-theme-stack主题更新和修改、最后修改时间问题解决的相关内容&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>归档 | Archives</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/archives/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>链接 | Links</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/%E9%93%BE%E6%8E%A5-links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/%E9%93%BE%E6%8E%A5-links/</guid>
        <description></description>
        </item>
        <item>
        <title>搜索 | Search</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
