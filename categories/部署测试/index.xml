<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>部署测试 on 羡余</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/categories/%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95/</link>
        <description>Recent content in 部署测试 on 羡余</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Hongyun</copyright>
        <lastBuildDate>Wed, 22 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://hongyun-yu.github.io/Hugo-dev/categories/%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>计算机网络总复习</title>
        <link>https://hongyun-yu.github.io/Hugo-dev/p/test-bushu/</link>
        <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://hongyun-yu.github.io/Hugo-dev/p/test-bushu/</guid>
        <description>&lt;img src="https://www.helloimg.com/i/2025/02/08/67a74cc6008c5.jpg" alt="Featured image of post 计算机网络总复习" /&gt;&lt;h2 id=&#34;计算机网络与互联网络&#34;&gt;计算机网络与互联网络
&lt;/h2&gt;&lt;h3 id=&#34;什么是互联网络&#34;&gt;什么是互联网络
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从构成的角度来看&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;互联网络由点和边构成。其中，点包括端系统（涵盖网络应用）以及路由器；边则是链路。简单来说，互联网络其实是网络的网络，众多不同的网络相互连接，形成了一个庞大复杂的体系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从服务的角度来看&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;互联网络是一种能够为应用提供通信服务的通信架构。在这个架构里，有连接且可靠的服务与无连接的不可靠服务相互配合，共同支撑各类应用开展通信服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议&lt;/strong&gt;：指对等层实体在通信过程中所遵循的规则的集合，这一集合可以从&lt;strong&gt;语法、语义及时序&lt;/strong&gt;三个方面去理解。&lt;strong&gt;语法&lt;/strong&gt;规定了数据与控制信息的结构或格式；&lt;strong&gt;语义&lt;/strong&gt;说明了需要发出何种控制信息，完成何种动作以及做出何种响应；&lt;strong&gt;时序&lt;/strong&gt;则明确了事件实现顺序的详细说明。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络边缘&#34;&gt;网络边缘
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络的结构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;网络整体结构分为网络边缘与网络核心两大部分，还涉及接入网络与通信链路。网络边缘包括运行应用的端系统，重点在于&lt;font style=&#34;color:#DF2A3F;&#34;&gt;端系统中的应用交互方式 &lt;/font&gt;；网络核心则由路由器组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;网络边缘的应用交互方式&lt;/font&gt;&lt;/strong&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;：&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C/S 模式（客户端 / 服务器模式）&lt;/strong&gt;：其特点在于，客户端向服务器发起请求，服务器响应请求并为客户端提供服务。服务器往往具备强大的处理能力与丰富的数据资源，客户端则相对轻量化，依赖服务器获取数据与执行复杂运算，常见于网页浏览、邮件收发等应用场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P2P 模式（对等模式）&lt;/strong&gt;：这种模式下，各个端系统地位平等，既可以作为客户端向其他节点请求资源，也能充当服务器为其他节点提供资源。它无需依赖集中式服务器，有较强的扩展性与容错性，常用于文件共享、流媒体直播等应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络的服务&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向连接的服务&lt;/strong&gt;：这类服务在通信前会先建立连接，整个通信过程数据传输稳定、可靠，能保证数据按序到达接收方，不过建立连接与拆除连接会带来额外开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无连接的服务&lt;/strong&gt;：通信时无需事先建立连接，直接发送数据报，传输效率较高，但无法保证数据一定能可靠、有序地到达接收方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络核心&#34;&gt;网络核心
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络核心&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组成&lt;/strong&gt;：网络交换设备，如路由器 + 链路。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：数据交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据交换方式及比较&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分组交换&lt;/strong&gt;：存储转发方式，统计复用。&lt;font style=&#34;color:#74B602;&#34;&gt;理解&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;VC（虚电路）&lt;/li&gt;
&lt;li&gt;Datagram（数据报）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线路交换&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;FDM（频分复用）&lt;/li&gt;
&lt;li&gt;TDM（时分复用）&lt;/li&gt;
&lt;li&gt;WDM（波分复用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络接入与物理介质&#34;&gt;网络接入与物理介质
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网络接入是指将端系统连接到边缘路由器的链路或网络。&lt;/li&gt;
&lt;li&gt;住宅接入采用点到点接入方式，具体包括：
&lt;ul&gt;
&lt;li&gt;ADSL（非对称数字用户线路）&lt;/li&gt;
&lt;li&gt;HFC（混合光纤同轴电缆）&lt;/li&gt;
&lt;li&gt;Cable Modem（电缆调制解调器）&lt;/li&gt;
&lt;li&gt;Home Networks（家庭网络）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;机构接入：LAN
&lt;ul&gt;
&lt;li&gt;以太网&lt;/li&gt;
&lt;li&gt;WLAN（无线网）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物理链路（第 0 层）
&lt;ul&gt;
&lt;li&gt;导向型介质（有型，光纤等）&lt;/li&gt;
&lt;li&gt;非导向型介质（无形，电磁波、光信号等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用介质
&lt;ul&gt;
&lt;li&gt;TP 双绞线&lt;/li&gt;
&lt;li&gt;同轴电缆&lt;/li&gt;
&lt;li&gt;光纤&lt;/li&gt;
&lt;li&gt;Radio（电磁波信号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;互联网络结构与-isp&#34;&gt;互联网络结构与 ISP
&lt;/h3&gt;&lt;h4 id=&#34;近似层次型结构&#34;&gt;近似层次型结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;T - 1 ISP&lt;/li&gt;
&lt;li&gt;T - 2 ISP (Regional ISP)&lt;/li&gt;
&lt;li&gt;Local ISP&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isp-之间的连接&#34;&gt;ISP 之间的连接
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对等连接&lt;/li&gt;
&lt;li&gt;IXP（&lt;font style=&#34;color:rgba(0, 0, 0, 0.85);&#34;&gt;互联网交换点&lt;/font&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内容提供商网络&#34;&gt;内容提供商网络
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在全球部署 DC（数据中心）&lt;/li&gt;
&lt;li&gt;内容提供商网络在多处与各个 ISP 相联&lt;/li&gt;
&lt;li&gt;内容提供商自己部署网络将全球的 DC 相联
&lt;ul&gt;
&lt;li&gt;内容提供商 DC 自己之间的访问，通过自己部署的专网&lt;/li&gt;
&lt;li&gt;用户接入后通过离用户最近的 DC 为之服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分组交换网络中的延迟与丢失&#34;&gt;分组交换网络中的延迟与丢失
&lt;/h3&gt;&lt;h4 id=&#34;延迟的-4-个原因计算font-stylecolordf2a3f---掌握font&#34;&gt;延迟的 4 个原因（计算）&lt;font style=&#34;color:#DF2A3F;&#34;&gt; - 掌握&lt;/font&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;处理延迟&lt;/li&gt;
&lt;li&gt;排队延迟&lt;/li&gt;
&lt;li&gt;传输延迟&lt;/li&gt;
&lt;li&gt;传播延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：n 段，分组 L，R，传播延迟 d 每段如何计算总体延迟；&lt;/p&gt;
&lt;h4 id=&#34;流量强度0-1与排队延迟正相关lar-font-stylecolordf2a3f--掌握font&#34;&gt;流量强度（0-1，与排队延迟正相关）：La/R &lt;font style=&#34;color:#DF2A3F;&#34;&gt;- 掌握&lt;/font&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;排队延迟   依赖**&lt;font style=&#34;color:#DF2A3F;&#34;&gt;流量强度的公式&lt;/font&gt;**；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;丢失原因&#34;&gt;丢失原因：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;缓冲区溢出 + 出错没通过校验&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;吞吐量font-stylecolor74b602--了解font&#34;&gt;吞吐量&lt;font style=&#34;color:#74B602;&#34;&gt; -了解&lt;/font&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;瞬间吞吐量&lt;/li&gt;
&lt;li&gt;平均吞吐量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;瓶颈链路决定了主机之间的吞吐量（从每段链路获得的大致带宽是 1/N，瓶颈链路是所有链路段中获得带宽最小的）。&lt;/p&gt;
&lt;h3 id=&#34;协议层次与服务模型&#34;&gt;协议层次与服务模型
&lt;/h3&gt;&lt;h4 id=&#34;为什么要分层&#34;&gt;为什么要分层
&lt;/h4&gt;&lt;h4 id=&#34;网络比较复杂分层实现比较容易设计调试实现&#34;&gt;网络比较复杂，分层实现比较容易设计、调试、实现。
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;分层：将复杂的网络功能划分成功能明确的层次，&lt;font style=&#34;color:#DF2A3F;&#34;&gt;上层利用下层提供的服务来实现本层的协议，从而为上层提供更复杂的功能。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一些术语和概念font-stylecolor74b602-理解font&#34;&gt;一些术语和概念&lt;font style=&#34;color:#74B602;&#34;&gt;-理解&lt;/font&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;服务、服务访问原语、服务访问点&lt;/li&gt;
&lt;li&gt;面向连接的服务、无连接的服务&lt;/li&gt;
&lt;li&gt;协议、协议数据单元 PDU&lt;/li&gt;
&lt;li&gt;服务（垂直）和协议（水平）之间的关系（区别与联系）
&lt;ul&gt;
&lt;li&gt;服务利用了下层协议的实现，为上层提供服务&lt;/li&gt;
&lt;li&gt;协议的实现依靠下层服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;互联网络分层模型及每一层的功能font-stylecolor74b602-理解font&#34;&gt;互联网络分层模型及每一层的功能&lt;font style=&#34;color:#74B602;&#34;&gt;-理解&lt;/font&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;网络层（端到端，路由和转发）&lt;/li&gt;
&lt;li&gt;链路层（点到点，帧为单位）&lt;/li&gt;
&lt;li&gt;物理层（物理信号）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装和解封&#34;&gt;封装和解封
&lt;/h4&gt;&lt;h3 id=&#34;历史font-stylecolor74b602-了解font&#34;&gt;历史&lt;font style=&#34;color:#74B602;&#34;&gt;-了解&lt;/font&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ARPANET：美国军方资助的分组交换实验网，由于 TCP/IP 架构的包容性、免费使用、架构便于应用创新吸引更多的用户等原因，用户数量、节点数量和应用数量越来越多。&lt;/li&gt;
&lt;li&gt;NSF 建立 ARPANET 的访问网。&lt;/li&gt;
&lt;li&gt;民用网络从军用网络脱开，成为现在的互联网。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;术语：IETF（互联网工程任务组）, ITU(国际电信联盟），IEEE（电气电子工程师协会 ），RFC（请求评论，是一系列关于互联网技术的文件）。&lt;/p&gt;
&lt;h2 id=&#34;应用层&#34;&gt;应用层
&lt;/h2&gt;&lt;p&gt;原理 + 应用实例 + SOCKET 编程&lt;/p&gt;
&lt;p&gt;应用的开发只集中在端系统上，对路由器没有任何改变，这鼓励了互联网架构下的应用创新。&lt;/p&gt;
&lt;h3 id=&#34;网络应用原理&#34;&gt;网络应用原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应用架构&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;C/S（客户端 / 服务器）&lt;/li&gt;
&lt;li&gt;P2P（对等网络）&lt;/li&gt;
&lt;li&gt;混合架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程间通信&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;同主机：操作系统定义的通信方法&lt;/li&gt;
&lt;li&gt;不同主机：利用网络提供的架构（Socket）交换报文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOCKET&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个整数，OS 用于标示应用通信关系所采用的本地标示&lt;/li&gt;
&lt;li&gt;**TCP：**连接的本地标示&lt;/li&gt;
&lt;li&gt;**UDP：**端节点的本地标示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程编址&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I&lt;strong&gt;P + PORT&lt;/strong&gt;（本质上在传输层应用了端口号，用于区分应用，TCP 和 UDP 使用端口号的方式不同）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用所需要的服务需要考虑的因素（网络所提供服务的主要指标）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;丢失率可靠性&lt;/li&gt;
&lt;li&gt;延迟、延迟差（抖动）&lt;/li&gt;
&lt;li&gt;带宽&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输层协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP 提供的服务特性&lt;/strong&gt;：可靠字节流服务，面向连接，流量控制，拥塞控制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP 提供的服务特性&lt;/strong&gt;：无连接，不可靠的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;都能够提供进程的标示，区分不同的进程&lt;/p&gt;
&lt;h3 id=&#34;web-和-http&#34;&gt;WEB 和 HTTP
&lt;/h3&gt;&lt;h4 id=&#34;web-应用包括&#34;&gt;WEB 应用包括
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;HTTP 协议&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CLIENT（客户端），SERVER（服务器）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;术语&#34;&gt;术语
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;网页&lt;/li&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;引用 URL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;font-stylecolordf2a3fhttp-协议font&#34;&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;HTTP 协议&lt;/font&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义了 C（客户端）和 S（服务器）之间通信的报文格式、解释和时序。&lt;/li&gt;
&lt;li&gt;HTTP 连接
&lt;ul&gt;
&lt;li&gt;持续性连接&lt;/li&gt;
&lt;li&gt;非持续性连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;往返延迟 RTT 和对象的抓取时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;font-stylecolordf2a3fhttp-10-到-http-11-再到-http-20-的演变font&#34;&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;HTTP 1.0 到 HTTP 1.1 再到 HTTP 2.0 的演变&lt;/font&gt;
&lt;/h4&gt;&lt;h5 id=&#34;http-10&#34;&gt;HTTP 1.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基本特点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无状态协议&lt;/strong&gt;：每个请求都是独立的，服务器不会在不同请求之间保留状态信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单的请求 - 响应模型&lt;/strong&gt;：客户端发起请求，服务器响应请求，一次请求对应一次响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种请求方法&lt;/strong&gt;：如 GET、POST、HEAD 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接管理效率低&lt;/strong&gt;：每对请求 - 响应都需要建立一个新的 TCP 连接，这导致了较高的连接建立开销，特别是在请求大量小文件时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏对缓存的充分支持&lt;/strong&gt;：缓存机制比较简单，没有很好地处理资源更新和验证的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;http-11&#34;&gt;HTTP 1.1
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;改进之处&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;持久连接（Keep - Alive）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;允许在一个 TCP 连接上进行多次请求 - 响应交互，减少了建立连接的开销。&lt;/li&gt;
&lt;li&gt;客户端和服务器可以通过&lt;code&gt;Connection: keep - alive&lt;/code&gt;头字段来协商保持连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管道化（Pipelining）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;允许客户端在等待第一个请求的响应时，发送第二个请求，进一步提高了性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强的缓存机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;引入了更多的缓存控制头字段，如&lt;code&gt;Cache - Control&lt;/code&gt;、&lt;code&gt;ETag&lt;/code&gt;和&lt;code&gt;If - Modified - Since&lt;/code&gt;等，使得缓存管理更加灵活和高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分块传输编码（Chunked Transfer Coding）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;允许服务器在不知道内容长度的情况下，分块发送响应内容，适用于动态生成内容的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;头部信息冗余&lt;/strong&gt;：每个请求和响应都携带完整的头部信息，在大量请求时，头部数据的传输会造成性能瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;队首阻塞（Head - of - line Blocking）&lt;/strong&gt;：在管道化连接中，如果一个请求被阻塞，后续的请求都要等待，即使后续请求不需要依赖前面被阻塞的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;http-20&#34;&gt;HTTP 2.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;主要特性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二进制分帧层（Binary Framing Layer）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 2.0 将所有传输的信息分割为更小的帧，并对帧进行二进制编码。这使得协议更加紧凑和高效。&lt;/li&gt;
&lt;li&gt;通过帧的形式，实现了在一个 TCP 连接上多路复用多个请求和响应，避免了 HTTP 1.1 中的队首阻塞问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头部压缩（Header Compression）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用 HPACK 算法对头部信息进行压缩，减少了头部数据的传输量。&lt;/li&gt;
&lt;li&gt;对于重复的头部字段，可以只传输差异部分，进一步提高了压缩效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器推送（Server Push）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;服务器可以在客户端没有请求的情况下，主动向客户端推送资源。例如，当客户端请求 HTML 页面时，服务器可以同时推送页面所需的 CSS 和 JavaScript 文件，减少客户端的等待时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能提升&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 2.0 通过上述特性，在网络性能上有了显著提升，特别是在处理大量小资源和高并发请求时表现出色。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从 HTTP 1.0 到 HTTP 1.1 再到 HTTP 2.0，协议不断进化，旨在解决前一版本的性能瓶颈，提高网络传输效率和用户体验。&lt;/p&gt;
&lt;h4 id=&#34;从-ssl-到-http30基于-udp的安全优化过程&#34;&gt;从 SSL 到 HTTP/3.0（基于 UDP）的安全优化过程
&lt;/h4&gt;&lt;h5 id=&#34;sslsecure-sockets-layer安全套接层&#34;&gt;SSL（Secure Sockets Layer，安全套接层）
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;SSL 是一种早期的网络安全协议，用于在客户端和服务器之间建立加密连接，确保数据在传输过程中的保密性、完整性和身份验证。&lt;/li&gt;
&lt;li&gt;它通过握手过程来协商加密算法、密钥交换和身份验证方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;SSL 的握手过程相对复杂，尤其是在早期版本中，这会导致较高的连接建立延迟。&lt;/li&gt;
&lt;li&gt;对于每一个新的连接，都需要重新进行握手，这在高并发场景下会影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性逐渐减弱&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;随着技术的发展，SSL 的一些加密算法和协议漏洞被发现，安全性逐渐不能满足现代网络安全的需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;tlstransport-layer-security传输层安全&#34;&gt;TLS（Transport Layer Security，传输层安全）
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;与 SSL 的关系&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;TLS 是 SSL 的继任者，它在 SSL 的基础上进行了改进和扩展。TLS 的目标与 SSL 相同，即确保网络通信的安全，但在安全性和性能方面有了显著提升。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改进之处&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增强的加密算法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;TLS 采用了更强大和更安全的加密算法，如 AES（Advanced Encryption Standard）等，以应对不断出现的安全威胁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化的握手过程&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;TLS 对握手过程进行了优化，例如引入了会话恢复机制。当客户端和服务器之前已经建立过连接，在一定条件下可以复用之前的会话参数，减少握手时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;http30基于-udp-的-quic-协议&#34;&gt;HTTP/3.0（基于 UDP 的 QUIC 协议）
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;QUIC（Quick UDP Internet Connections）协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/3.0 是基于 QUIC 协议的，而 QUIC 是基于 UDP 的。QUIC 旨在解决 TCP 和 TLS 在性能和安全性方面的一些问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全特性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;集成加密&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QUIC 将加密作为协议的核心部分，从一开始就对数据进行加密，避免了像 TCP + TLS 那样分两步进行加密的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0 - RTT 连接建立（在某些情况下）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QUIC 允许在某些条件下实现 0 - RTT（Round - Trip Time）连接建立。例如，当客户端和服务器之前已经建立过连接并且缓存了相关的加密参数时，客户端可以立即发送应用数据，无需等待握手过程完成，大大减少了连接建立延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前向纠错（Forward Error Correction，FEC）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QUIC 采用了 FEC 技术，通过在数据中添加冗余信息来恢复在传输过程中丢失的数据，减少了因丢包导致的数据重传，提高了传输效率和安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从 SSL 到 HTTP/3.0（基于 UDP）的演变过程，是一个不断优化安全性能和网络传输效率的过程。HTTP/3.0 通过基于 UDP 的 QUIC 协议，在安全和性能方面都有了显著的提升。&lt;/p&gt;
&lt;h4 id=&#34;报文格式&#34;&gt;报文格式
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_45951891/article/details/134217064&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wireshark——抓包分析_wireshark抓包数据怎么看-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求报文
&lt;ul&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;响应报文
&lt;ul&gt;
&lt;li&gt;状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cookieshttp无状态-有状态&#34;&gt;COOKIES（HTTP无状态-&amp;gt;有状态）
&lt;/h4&gt;&lt;h4 id=&#34;web-缓存&#34;&gt;WEB 缓存
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用：通过本地命中，减少这些对象的访问延迟；进一步减少接入链路的流量强度，从而降低派对延迟带来总体平均延迟的减少；减轻服务器的负担。&lt;/li&gt;
&lt;li&gt;优点：通过一个实例，计算不要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ftpfont-stylecolor74b602不要求font&#34;&gt;FTP&lt;font style=&#34;color:#74B602;&#34;&gt;（不要求）&lt;/font&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;作用：在 CS 之间传输文件。&lt;/li&gt;
&lt;li&gt;构成：
&lt;ul&gt;
&lt;li&gt;C（客户端）&lt;/li&gt;
&lt;li&gt;S（服务器）&lt;/li&gt;
&lt;li&gt;FTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FTP 的连接
&lt;ul&gt;
&lt;li&gt;控制连接（带外传输）&lt;/li&gt;
&lt;li&gt;数据连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令和响应&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;email&#34;&gt;EMAIL
&lt;/h3&gt;&lt;h4 id=&#34;电子邮件应用的构成&#34;&gt;电子邮件应用的构成
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用户代理&lt;/li&gt;
&lt;li&gt;邮件服务器&lt;/li&gt;
&lt;li&gt;SMTP（简单邮件传输协议）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;邮件报文格式解析&#34;&gt;邮件报文格式解析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;报文头&lt;/li&gt;
&lt;li&gt;报文体&lt;/li&gt;
&lt;li&gt;MIME（多用途互联网邮件扩展）：邮件多媒体扩展，可以在邮件中编解码多媒体内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;邮件存取协议&#34;&gt;邮件存取协议
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用&lt;/li&gt;
&lt;li&gt;常用
&lt;ul&gt;
&lt;li&gt;IMAP（互联网邮件访问协议）&lt;/li&gt;
&lt;li&gt;POP3（邮局协议版本 3）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns&#34;&gt;DNS
&lt;/h3&gt;&lt;h4 id=&#34;dns-作用&#34;&gt;DNS 作用
&lt;/h4&gt;&lt;p&gt;完成域名到 IP 地址的转换（还包括别名到正规名字、邮件服务器名字到正规名字转换等），是应用层面的互联网&lt;font style=&#34;color:#DF2A3F;&#34;&gt;基础设施&lt;/font&gt;，其他应用使用。&lt;/p&gt;
&lt;h4 id=&#34;二dns-的概念&#34;&gt;二、DNS 的概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;分布式、层次数据库&lt;/li&gt;
&lt;li&gt;命名是分层的&lt;/li&gt;
&lt;li&gt;域名信息存储和服务是分布式的，每个域名服务器担任一个区域 ZONE 的名字到 IP 地址的权威转换，也缓存名字 - IP 信息的转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三dns-的构成&#34;&gt;三、DNS 的构成
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解析器：本地应用&lt;/li&gt;
&lt;li&gt;域名服务器&lt;/li&gt;
&lt;li&gt;DNS 协议
&lt;ul&gt;
&lt;li&gt;报文：请求和应答格式相同&lt;/li&gt;
&lt;li&gt;RR：资源记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;域名解析的过程&#34;&gt;域名解析的过程
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;(解析器 -&amp;gt; 本地 DNS 服务器 -&amp;gt; 上层域名服务器 -&amp;gt;&amp;hellip;-&amp;gt; 权威名字服务器，返回)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地域名服务器、权限域名服务器、顶级域名服务器、根域名服务器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归解析：如果主机所询问的本地域名服务器不知道被查询的域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其它根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是报错，表示无法查询到所需的IP地址。&lt;/li&gt;
&lt;li&gt;迭代解析：当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地服务器进行后续的查询。根域名服务器通常是把自己知道的顶级域名服务器的IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本地域名服务器的查询请求后，要么给出所要查询的IP地址，要么告诉本地服务器下一步应当向哪一个权限域名服务器进行查询。最后，知道了所要解析的IP地址或报错，然后把这个结果返回给发起查询的主机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2025/png/42840982/1736144525748-a7a35972-1aeb-4e16-acae-ca23c1300d01.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;dns-缓存&#34;&gt;DNS 缓存
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用&lt;/li&gt;
&lt;li&gt;本地缓存 + 服务器缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;p2pfont-stylecolor74b602了解p2p-的概念和优势即可font&#34;&gt;P2P&lt;font style=&#34;color:#74B602;&#34;&gt;（了解P2P 的概念和优势即可）&lt;/font&gt;
&lt;/h3&gt;&lt;h4 id=&#34;p2p-概念&#34;&gt;P2P 概念
&lt;/h4&gt;&lt;p&gt;每个对等体即是客户端又是服务器；P2P 网络是这些 peer 构成的应用层面的逻辑网络。&lt;/p&gt;
&lt;h4 id=&#34;p2p-网络比-cs-方式分发内容快的原因&#34;&gt;P2P 网络比 C/S 方式分发内容快的原因
&lt;/h4&gt;&lt;p&gt;这些 peer 节点参与到内容的上载，流量和服务都是分布式的，可扩展性。&lt;/p&gt;
&lt;h4 id=&#34;典型-p2p-应用及其原理font-stylecolor74b602不要求font&#34;&gt;典型 P2P 应用及其原理&lt;font style=&#34;color:#74B602;&#34;&gt;（不要求）&lt;/font&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Napster：知道名词&lt;/li&gt;
&lt;li&gt;Gnutella：知道名词&lt;/li&gt;
&lt;li&gt;KaZaA：知道名词&lt;/li&gt;
&lt;li&gt;BT：知道名字&lt;/li&gt;
&lt;li&gt;DHT：&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;视频流化服务和-cdnfont-stylecolor74b602了解font&#34;&gt;视频流化服务和 CDN&lt;font style=&#34;color:#74B602;&#34;&gt;（了解）&lt;/font&gt;
&lt;/h3&gt;&lt;h4 id=&#34;服务器向客户端进行视频流化的方式&#34;&gt;服务器向客户端进行视频流化的方式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;UDP 流化&lt;/li&gt;
&lt;li&gt;http 流化&lt;/li&gt;
&lt;li&gt;DASH（Dynamic, Adaptive Streaming over HTTP）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dash-流化的过程&#34;&gt;DASH 流化的过程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;客户端获取告示文件&lt;/li&gt;
&lt;li&gt;客户端按照情况，向（可能是不同的）服务器请求不同视频质量的内容块，客户端智能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cdn&#34;&gt;CDN
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;单个服务器，或者服务器群向客户端提供海量内容并发服务的问题：扩展性差&lt;/li&gt;
&lt;li&gt;CDN 原理
&lt;ul&gt;
&lt;li&gt;应用层面的协作服务网络&lt;/li&gt;
&lt;li&gt;在全网部署缓存节点，内容预先部署到 CDN 缓存节点上&lt;/li&gt;
&lt;li&gt;用户请求通过域名解析重定向向离自己 “最近的节点” 请求内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存节点放置的方式
* Enter Deep
* Bring Home&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-的-socket-编程-font-stylecolor74b602理解font&#34;&gt;TCP 的 SOCKET 编程 &lt;font style=&#34;color:#74B602;&#34;&gt;理解&lt;/font&gt;
&lt;/h3&gt;&lt;h4 id=&#34;socket-概念&#34;&gt;SOCKET 概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TCP 连接的本地标示示，向这个 SOCKET 写就是发送给对方的进程；从 SOCKET 中读，就是读取对方发送过来的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;socket-api&#34;&gt;SOCKET API
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建&lt;/li&gt;
&lt;li&gt;使用（读和写）&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-socket-数据传输的特点&#34;&gt;TCP SOCKET 数据传输的特点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;面向连接，可靠字节流服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-socket-编程&#34;&gt;TCP SOCKET 编程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建立 SOCKET&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;客户端 TCP 实体动作：和服务器端的 TCP 实体握手沟通。&lt;/li&gt;
&lt;li&gt;服务器端的动作&lt;/li&gt;
&lt;li&gt;三次握手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 SOCKET&lt;/li&gt;
&lt;li&gt;关闭 SOCKET&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp-的-socket-编程-font-stylecolor74b602理解font&#34;&gt;UDP 的 SOCKET 编程 &lt;font style=&#34;color:#74B602;&#34;&gt;理解&lt;/font&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UDP SOCKET数据传输的特点&lt;/li&gt;
&lt;li&gt;编程&lt;font style=&#34;color:#74B602;&#34;&gt; 不要求&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;建立SOCKET（之前客户端 UDP 实体和服务器不用握手，不为之后的通信做准备）&lt;/li&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;传输层&#34;&gt;传输层
&lt;/h2&gt;&lt;h3 id=&#34;传输层服务&#34;&gt;传输层服务
&lt;/h3&gt;&lt;h4 id=&#34;传输服务&#34;&gt;传输服务
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;能够使端系统应用之间进行逻辑通信。&lt;/li&gt;
&lt;li&gt;传输协议：运行于端系统的 2 个对等传输层实体相互通信应该遵守的规则集合。&lt;/li&gt;
&lt;li&gt;传输服务和网络服务的区别
&lt;ul&gt;
&lt;li&gt;网络服务：主机到主机的通信。&lt;/li&gt;
&lt;li&gt;传输服务：进程到进程的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;互联网络传输层协议&#34;&gt;互联网络传输层协议
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TCP：有连接，可靠保序数传服务。&lt;/li&gt;
&lt;li&gt;UDP：无连接，不可靠，不保序的数传服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复用与解复用&#34;&gt;复用与解复用
&lt;/h3&gt;&lt;h4 id=&#34;复用&#34;&gt;复用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;源端多个上层应用收集数据：应用报文，封装报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解复用&#34;&gt;解复用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;接收端将数据按照端口号（结合 IP 地址）给相应的 SOCKET 对应的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复用和解复用的工作原理ip-port&#34;&gt;复用和解复用的工作原理：IP PORT
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TCP 有连接情况：SOCKETS 为 4 元组。&lt;/li&gt;
&lt;li&gt;UDP 无连接情况：SOCKETS 为 2 元组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无连接传输层协议-udp&#34;&gt;无连接传输层协议 UDP
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UDP 的必要性&lt;/strong&gt;：有些应用对实时性比较在乎，对可靠性要求不高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP 报文（无连接的，因此叫做 UDP 数据报）格式&lt;/strong&gt;。（头部 + 载荷）&lt;/li&gt;
&lt;li&gt;**UDP 报文校验和的计算（Check Sum）  **&lt;font style=&#34;color:#74B602;&#34;&gt;理解&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可靠数据传输原理&#34;&gt;可靠数据传输原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议演进的方式讲解如何进行 rdt&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;加入一些假设，简单的协议可以提供 rdt 服务。&lt;/li&gt;
&lt;li&gt;去掉一些假设，需要协议实体做相应的变化从而能够进行 rdt。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**技术机制 ** &lt;strong&gt;&lt;font style=&#34;color:#74B602;&#34;&gt; &lt;/font&gt;&lt;/strong&gt;&lt;font style=&#34;color:#74B602;&#34;&gt;理解&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;校验和，正向确认，反向确认。&lt;/li&gt;
&lt;li&gt;序号：检查重复。&lt;/li&gt;
&lt;li&gt;只有正向确认的机制。&lt;/li&gt;
&lt;li&gt;检错重发和超时重发：处理丢失。
&lt;ul&gt;
&lt;li&gt;滑动窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;font-stylecolordf2a3frdtreliable-data-transfer可靠数据传输102030-的功能特点font&#34;&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;RDT（Reliable Data Transfer，可靠数据传输）1.0、2.0、3.0 的功能特点&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_39583450/article/details/113481150&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算机网络（14）——可靠数据传输原理_rdt3.0接收方fsm-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;rdt-10&#34;&gt;RDT 1.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解决错误问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RDT 1.0 假设底层信道完全可靠，不会出现比特差错，也不会丢失分组。&lt;/li&gt;
&lt;li&gt;在这种理想情况下，发送方只需将数据发送出去，接收方就能无误地接收到数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;发送方：简单地将数据发送给接收方，无需考虑数据是否丢失或损坏。&lt;/li&gt;
&lt;li&gt;接收方：接收数据并进行处理，不需要反馈机制来确认数据是否正确接收。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;rdt-20&#34;&gt;RDT 2.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解决序号 / 时序问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RDT 2.0 考虑到了底层信道可能出现比特差错的情况，但仍然假设分组不会丢失。&lt;/li&gt;
&lt;li&gt;为了检测和纠正错误，引入了差错检测码（如校验和）和确认（ACK）与否认（NAK）机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;发送方：
&lt;ul&gt;
&lt;li&gt;发送带有差错检测码的数据分组。&lt;/li&gt;
&lt;li&gt;等待接收方的 ACK 或 NAK 反馈。如果收到 ACK，则继续发送下一个分组；如果收到 NAK，则重发当前分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收方：
&lt;ul&gt;
&lt;li&gt;接收数据分组并检查差错检测码。&lt;/li&gt;
&lt;li&gt;如果数据无误，发送 ACK 给发送方；如果检测到错误，发送 NAK 给发送方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;rdt-30&#34;&gt;RDT 3.0
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解决超时 / 重复问题&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RDT 3.0 在 RDT 2.0 的基础上，进一步考虑了分组可能丢失的情况。&lt;/li&gt;
&lt;li&gt;为了处理分组丢失问题，引入了定时器机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;发送方：
&lt;ul&gt;
&lt;li&gt;发送数据分组后启动定时器。&lt;/li&gt;
&lt;li&gt;如果在定时器超时前收到 ACK，则取消定时器并发送下一个分组。&lt;/li&gt;
&lt;li&gt;如果定时器超时，无论是否收到 NAK，都重发当前分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收方：
&lt;ul&gt;
&lt;li&gt;与 RDT 2.0 类似，接收数据分组，检查差错检测码，发送 ACK 或 NAK。&lt;/li&gt;
&lt;li&gt;如果收到重复的分组（由于发送方超时重发），仍然发送 ACK 给发送方，以避免发送方不断重发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;RDT 协议从 1.0 到 3.0 不断演进，逐步解决了可靠数据传输过程中的各种实际问题，从假设理想信道到考虑比特差错、分组丢失等情况，通过增加差错检测、确认机制、定时器等手段来确保数据的可靠传输。&lt;/p&gt;
&lt;h4 id=&#34;利用率计算font-stylecolor74b602-了解font&#34;&gt;利用率计算&lt;font style=&#34;color:#74B602;&#34;&gt; 了解&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;停止等待技术：链路带宽延迟积（容量）效率低。
管道技术：在未经对方确认的情况下，可以连续发送多个 PDU。
GBN：发送窗口大于 1，接收窗口 = 1（只能顺序接收；发送方只设置一个超时定时器，一旦出错，返回到出错的那一个 PDU 重发）。
SR：发送窗口大于 1，接收窗口大于 1（能够乱序接收；发送方为每个发送出去的 PDU 设置超时定时器，哪个超时重发哪个）。&lt;/p&gt;
&lt;h3 id=&#34;有连接传输层协议tcp&#34;&gt;有连接传输层协议：TCP
&lt;/h3&gt;&lt;h4 id=&#34;tcp-服务特性&#34;&gt;TCP 服务特性
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;点对点：可靠保序字节流；管道（在未加确认情况下一次次传多个未经确认的段）；缓冲；全双工；面向连接；流控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-段结构&#34;&gt;TCP 段结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;各个字段的作用。&lt;/li&gt;
&lt;li&gt;连接建立时协商好双方的起始序号；&lt;/li&gt;
&lt;li&gt;序号是首字节在字节流的偏移量；&lt;/li&gt;
&lt;li&gt;确认：是对顺序收到的最后一个字节 + 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rtt-时间估计和重发超时时间估计&#34;&gt;RTT 时间估计和重发超时时间估计
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;移动平均计算&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;平均往返延迟。&lt;/li&gt;
&lt;li&gt;当前往返延迟采样值与平均值的偏差。&lt;/li&gt;
&lt;li&gt;平均值 + 4 偏差。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-的可靠数据传输原理&#34;&gt;TCP 的可靠数据传输原理
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;快速重传&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在没有超时情况下，收到对方对于某一个段的重复三次（一共 4 个）ACK。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;流量控制&#34;&gt;流量控制
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;流控目的&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;防止淹没接收方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流控手段&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;将接收窗口大小捎带方式传递给发送端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-连接管理-font-stylecolor74b602-理解font&#34;&gt;TCP 连接管理 &lt;font style=&#34;color:#74B602;&#34;&gt; 理解&lt;/font&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;连接建立&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;3 次握手技术，对双方选择的初始序号给予确认，准备好缓冲区。&lt;/li&gt;
&lt;li&gt;第一次握手：SYN = 1，ACK = 0：发起端的序号。&lt;/li&gt;
&lt;li&gt;第二次握手：&lt;code&gt;syn = 1&lt;/code&gt;，&lt;code&gt;ack = 1&lt;/code&gt;，被呼叫方的序号。&lt;/li&gt;
&lt;li&gt;第三次握手：&lt;code&gt;(syn = 0) ack = 1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接拆除&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;存在 2 军问题不完美（也不存在完美释放连接的方案，用定时器凑合解决）。&lt;/li&gt;
&lt;li&gt;连接状态及其变迁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;拥塞控制原理&#34;&gt;拥塞控制原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;拥塞的概念&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;解释什么是拥塞，以及为什么会发生拥塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制目的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制手段&lt;/strong&gt;**&lt;font style=&#34;color:#74B602;&#34;&gt;  理解&lt;/font&gt;**
&lt;ul&gt;
&lt;li&gt;端到端的拥塞控制：&lt;strong&gt;TCP&lt;/strong&gt; 采用这种方式。&lt;/li&gt;
&lt;li&gt;网络辅助的拥塞控制：&lt;strong&gt;ATM&lt;/strong&gt; 网络标志和携带拥塞信息，反馈给主机&lt;font style=&#34;color:#74B602;&#34;&gt;（不要求）&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tcp-的拥塞控制原理&#34;&gt;TCP 的拥塞控制原理
&lt;/h3&gt;&lt;h4 id=&#34;tcp-拥塞控制原理font-stylecolordf2a3f需掌握font&#34;&gt;TCP 拥塞控制原理&lt;font style=&#34;color:#DF2A3F;&#34;&gt;（需掌握）&lt;/font&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检测拥塞&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;超时（拥塞，存在误判的可能性，但概率比较低）。&lt;/li&gt;
&lt;li&gt;三个冗余 ACK（轻微拥塞）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;AIMD（加性增&lt;font style=&#34;color:#F1A2AB;&#34;&gt;1&lt;/font&gt;、乘性减&lt;font style=&#34;color:#F1A2AB;&#34;&gt;半&lt;/font&gt;）、慢启动&lt;font style=&#34;color:#F1A2AB;&#34;&gt;（加倍）&lt;/font&gt;、超时之后的保守策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-拥塞控制的-2-种算法&#34;&gt;TCP 拥塞控制的 2 种算法
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Tahoe&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;超时事件和 3 个冗余 ACK 处理一样的，不要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reno 算法&lt;/strong&gt; &lt;strong&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;（需掌握）&lt;/font&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;超时事件发生和 3 个冗余 ACK 处理不一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;平均延迟和超时定时器时间的设置&#34;&gt;平均延迟和超时定时器时间的设置
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;**JACSON 算法（具体初始化和迭代算法， ** &lt;strong&gt;&lt;font style=&#34;color:#74B602;&#34;&gt;不要求&lt;/font&gt;&lt;/strong&gt; &lt;strong&gt;）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;平均往返延迟公式。&lt;/li&gt;
&lt;li&gt;Dev 算法：第一个超时时间 = 延迟的 1/2，初值设置；后面按公式。&lt;/li&gt;
&lt;li&gt;超时时间设置：es + 4dev。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;tcp-公平性font-stylecolor74b602了解font&#34;&gt;TCP 公平性：&lt;font style=&#34;color:#74B602;&#34;&gt;了解&lt;/font&gt;
&lt;/h4&gt;&lt;h4 id=&#34;tcp-的吞吐量计算font-stylecolor74b602不要求font&#34;&gt;TCP 的吞吐量计算：&lt;font style=&#34;color:#74B602;&#34;&gt;不要求&lt;/font&gt;。
&lt;/h4&gt;&lt;h2 id=&#34;网络层之数据平面&#34;&gt;网络层之数据平面
&lt;/h2&gt;&lt;h3 id=&#34;简介&#34;&gt;简介
&lt;/h3&gt;&lt;h4 id=&#34;网络层的主要服务和功能&#34;&gt;网络层的主要服务和功能
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;服务&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;向传输层提供主机到主机的段传输服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能 1—— 转发，数据平面功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;从路由器的一个端口流入，从另外一个端口流出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能 2—— 路由，控制平面的功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;决定从源到目的的路径。&lt;/li&gt;
&lt;li&gt;两个功能相互配合将数据报从源传送到目标主机；关联是转发表、流表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;实现网络层功能的两种方式&#34;&gt;实现网络层功能的两种方式
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;传统方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;控制平面和数据平面功能垂直集成在每个设备上（路由器）。&lt;/li&gt;
&lt;li&gt;控制平面功能：路由协议实体分布式地计算路由表。&lt;/li&gt;
&lt;li&gt;数据平面的功能：IP 协议按照路由表进行分组的转发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDN 通用转发方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;控制平面和数据平面分离，在不同设备上实现。&lt;/li&gt;
&lt;li&gt;SDN 控制器集中式计算、下发流表实现控制平面功能。&lt;/li&gt;
&lt;li&gt;SDN 分组交换机按照流表对到来的分组进行转发，实现数据平面的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;网络层提供服务的一些重要指标&#34;&gt;网络层提供服务的一些重要指标
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;带宽&lt;/li&gt;
&lt;li&gt;延迟、延迟差&lt;/li&gt;
&lt;li&gt;丢包与否&lt;/li&gt;
&lt;li&gt;丢包率&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;路由器结构和工作原理&#34;&gt;路由器结构和工作原理
&lt;/h3&gt;&lt;h4 id=&#34;路由器的-2-大功能font-stylecolor74b602需理解font&#34;&gt;路由器的 2 大功能&lt;font style=&#34;color:#74B602;&#34;&gt;（需理解）&lt;/font&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;路由协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;结果形成路由表（转发表）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转发分组&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用转发表转发分组，交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;构成&#34;&gt;构成
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;输入端口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;线路终端实现物理层功能，链路协议实体实现链路层功能，网络层功能实现分布式分组转发。&lt;/li&gt;
&lt;li&gt;最长前缀匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换结构&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;基于内存的，基于 bus 的，基于 CROSSBAR 的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出端口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;网络层可以实现分组的调度：FIFO，RR，WFQ。&lt;/li&gt;
&lt;li&gt;调度支持对多媒体分组等优先级分组的传输支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由处理器&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;控制各部分协调工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;互联网网络层协议&#34;&gt;互联网网络层协议
&lt;/h3&gt;&lt;h4 id=&#34;ip-网络提供的服务模型尽力而为&#34;&gt;IP 网络提供的服务模型：尽力而为
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;包括含义：丢包、乱序、不可靠、（可能包括重复）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;网络层构成&#34;&gt;网络层构成
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;IP 协议、路由选择协议、ICMP 协议&lt;/li&gt;
&lt;li&gt;转发表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 数据报格式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;各个字段的作用&lt;/li&gt;
&lt;li&gt;分片和重组 &lt;font style=&#34;color:#DF2A3F;&#34;&gt;- 掌握&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;一个分组的总体大小超过了转发链路的 MTU，因此要切片。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;到目标主机重组。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 编址&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;IP 地址：主机或路由器和网络接口的标识。&lt;/li&gt;
&lt;li&gt;子网
&lt;ul&gt;
&lt;li&gt;在一个子网内的设备之间的通信有 2 个特点：1）通信无需借助路由器；2）子网前缀一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 地址分类：ABC（单步）  D（多步）  E（预留）&lt;/li&gt;
&lt;li&gt;特殊 IP 地址（内网、全0、全1）&lt;/li&gt;
&lt;li&gt;子网掩码和 CIDR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**NAT ** &lt;strong&gt;&lt;font style=&#34;color:#74B602;&#34;&gt;不要求&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;DHCP 协议：上网主机获得 IP、掩码、默认网关和 local name server。&lt;/li&gt;
&lt;li&gt;路由聚集：连续的子网前缀的子网可达信息可以做聚集，减少向外部传输路由的数量，减少路由计算的负担。支持大概的路由聚集，与此对应的是最长前缀匹配的措施。&lt;/li&gt;
&lt;li&gt;IPV 6：
&lt;ol&gt;
&lt;li&gt;格式（固定头部长度 40B ），地址：128 bits&lt;/li&gt;
&lt;li&gt;变化（32-&amp;gt;128）&lt;/li&gt;
&lt;li&gt;IPV4 到 IPV6 的迁移
&lt;ol&gt;
&lt;li&gt;隧道&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;通用转发和-sdn&#34;&gt;通用转发和 SDN
&lt;/h3&gt;&lt;h4 id=&#34;sdn-方式控制平面和数据平面分离的优点font-stylecolor74b602需理解font&#34;&gt;SDN 方式控制平面和数据平面分离的优点&lt;font style=&#34;color:#74B602;&#34;&gt;（需理解）&lt;/font&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;集中在控制器上实现控制逻辑，网络可编程，可以实现各种复杂的网络功能、新功能（一次部署，持续升级）、方便管理。&lt;/li&gt;
&lt;li&gt;形成开发生态（控制器、分组交换机、网络应用，在一个开放的框架下协作）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;sdn-分组交换机按照计算出的流表进行分组转发通用便于升级&#34;&gt;SDN 分组交换机按照计算出的流表进行分组转发、通用、便于升级。
&lt;/h4&gt;&lt;h5 id=&#34;分组交换机工作原理font-stylecolor74b602需理解font&#34;&gt;分组交换机工作原理&lt;font style=&#34;color:#74B602;&#34;&gt;（需理解）&lt;/font&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;模式匹配 + 行动（不仅仅是转发，还可以组播、泛洪、修改字段和阻塞等）。&lt;/li&gt;
&lt;li&gt;进来分组，按照各级字段匹配流表，按照相应的行动动作分组。&lt;/li&gt;
&lt;li&gt;按照优先权进行判断；之后，统计计数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;网络层之控制平面&#34;&gt;网络层之控制平面
&lt;/h2&gt;&lt;h3 id=&#34;概述&#34;&gt;概述
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;两种方式实现控制平面功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;传统方式：在每个路由器上分布式实现路由功能。&lt;/li&gt;
&lt;li&gt;SDN 方式：在 SDN 控制器上由网络应用集中式计算、生成流表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;路由选择算法&#34;&gt;路由选择算法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;路由目标&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根据收集到的路由信息（拓扑、链路代价等）计算出源到目标较好的路径，代价比较低的路径。&lt;/li&gt;
&lt;li&gt;主机 - 主机的路径 == 路由器到路由器的路径。&lt;/li&gt;
&lt;li&gt;路由目标实际上是计算出节点的汇集树。&lt;/li&gt;
&lt;li&gt;路由原则：完整正确、简单、健壮、稳定公平、最优（次优）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由分类&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;静态和动态（自适应）。&lt;/li&gt;
&lt;li&gt;局部和全局的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_53144843/article/details/121254000&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;路由算法(Dijkstra, Bellman-Ford算法)_bellmanford算法和dijkstra-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;LS 算法（链路状态）&lt;/strong&gt; &lt;strong&gt;（需掌握）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;全局的路由选择算法，工作原理&lt;/li&gt;
&lt;li&gt;每个节点收集邻居信息，生成 LS；LS 全网泛洪。&lt;/li&gt;
&lt;li&gt;节点收集 LS 状态分组，形成网络拓扑。&lt;/li&gt;
&lt;li&gt;按照最短路径算法算出到其他节点的最优路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DV 算法（距离矢量）&lt;/strong&gt; &lt;strong&gt;（需掌握）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;局部的路由选择算法，工作原理&lt;/li&gt;
&lt;li&gt;每个节点维护到所有其他节点的下一跳和代价。&lt;/li&gt;
&lt;li&gt;邻居节点之间定期交换 DV。&lt;/li&gt;
&lt;li&gt;按照 Bellman-Ford 不断迭代生成到所有目标的代价和相应的下一跳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**层次路由 ** &lt;strong&gt;理解&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个平面解决路由的问题：计算、传输和存储路由信息的量太大，不具备可扩展性，也不满足不同网络运营方不同的管理需求&lt;/li&gt;
&lt;li&gt;分成 AS, AS 内部之间的节点路由由&lt;strong&gt;内部网关协议&lt;/strong&gt;解决：AS 之间的路由，分层解决（路由到网关，由网关路由到目标网关（外部网关协议），到了目标 AS 内部，采用 AS 内部的路由解决）&lt;/li&gt;
&lt;li&gt;优势：分层路由，解决了规模性问题，管理性问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;路由算法用于确定数据分组从源节点到目的节点的传输路径，其中静态路由与动态路由是两种重要的路由方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态路由&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：静态路由是由网络管理员手动配置的路由信息。管理员依据网络拓扑结构，明确指定每个目的网络的下一跳路由器或出口接口。例如，在一个小型企业网中，仅有几条固定线路连接不同部门，管理员清楚各部门之间数据该如何流转，就可以手动设置静态路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性高&lt;/strong&gt;：由于路由表是人工定制，外部攻击者较难篡改路由信息，能保障网络的基本架构安全。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低开销&lt;/strong&gt;：不需要额外的路由协议进行路由信息交互，几乎不占用网络带宽与设备资源，适合简单网络拓扑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可预测性强&lt;/strong&gt;：数据传输路径固定，网络管理员能精准预估数据包走向，便于故障排查。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缺乏灵活性&lt;/strong&gt;：网络拓扑一旦变动，像新增节点、链路故障，静态路由无法自动调整，必须人工重新配置，在大型复杂网络里，工作量巨大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置繁琐&lt;/strong&gt;：在大规模网络中，需要为众多目的网络逐个设置路由，容易出错且管理成本飙升。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态路由&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：动态路由依靠路由协议，让路由器之间自动交换网络拓扑和链路状态等信息，随后各自依据特定算法计算出最佳路由。常见的动态路由协议有 RIP、OSPF、BGP 等。例如，在互联网骨干网中，无数的路由器时刻在交互信息，动态更新路由表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自适应网络变化&lt;/strong&gt;：链路故障、网络扩容时，路由器能快速重新计算路由，保障网络畅通，无需人工干预。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置简便&lt;/strong&gt;：只需在路由器上启用相关路由协议，后续路由更新依靠协议自动完成，降低了管理员工作量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;占用资源&lt;/strong&gt;：路由协议持续交互信息，消耗网络带宽；路由器计算路由也占用自身的 CPU、内存资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存在安全风险&lt;/strong&gt;：路由协议传输的信息如果被恶意篡改，会误导网络流量走向，引发网络安全事故。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态路由和动态路由适用于不同的网络场景，简单、稳定的网络更适合静态路由，而复杂多变、规模较大的网络则要依靠动态路由来保障高效的数据传输。&lt;/p&gt;
&lt;h3 id=&#34;互联网的路由协议&#34;&gt;互联网的路由协议
&lt;/h3&gt;&lt;h4 id=&#34;路由协议分类&#34;&gt;路由协议分类
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;内部网关协议 IGP&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RIP&lt;/li&gt;
&lt;li&gt;OSPF：AS 内部支持分层路由，同时支持多种代价。&lt;/li&gt;
&lt;li&gt;IGRP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部网关协议 EGP&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;BGP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;网关路由器参与-as-内部路由计算收集-as-内部子网可达信息&#34;&gt;网关路由器参与 AS 内部路由计算，收集 AS 内部子网可达信息
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;网关路由器通过 AS 间路由向其他 AS 网关通告子网可达信息。&lt;/li&gt;
&lt;li&gt;网关路由器还转发 “过手” 子网可达信息，但是 AS 路径要加上它自己 AS 编号（防止形成环路）。&lt;/li&gt;
&lt;li&gt;网关路由器通过 i - BGP 向 AS 内部所有路由节点通告收集到的子网可达信息。&lt;/li&gt;
&lt;li&gt;内部路由器，通过 AS 内路由和 AS 间路由共同决定向 AS 外部子网的下一跳（内部网关协议决定如何去往网关，外部网关协议决定通过那个网关可到达 AS 外部子网）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;内部网关协议和外部网关协议的对比font-stylecolor74b602了解font&#34;&gt;内部网关协议和外部网关协议的对比&lt;font style=&#34;color:#74B602;&#34;&gt;（了解）&lt;/font&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;内部网关协议重视效率，性能。&lt;/li&gt;
&lt;li&gt;外部网关协议重视策略：经济策略和政治策略&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sdn-控制平面&#34;&gt;SDN 控制平面
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在控制器上集中实现控制功能。&lt;/li&gt;
&lt;li&gt;控制器和 SDN 交换机按照&lt;code&gt;openflow&lt;/code&gt;等南向接口协议等下发流表，上报设备状态。&lt;/li&gt;
&lt;li&gt;SDN 控制器按照北向接口和网络应用打交道。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;icmp-协议font-stylecolor74b602了解font&#34;&gt;ICMP 协议&lt;font style=&#34;color:#74B602;&#34;&gt;（了解）&lt;/font&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;作用：包括错误、&lt;code&gt;echo&lt;/code&gt;请求和应答。&lt;/li&gt;
&lt;li&gt;报文类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据链路层与局域网&#34;&gt;数据链路层与局域网
&lt;/h2&gt;&lt;h3 id=&#34;引论&#34;&gt;引论
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;链路层提供的服务&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;成帧、链路存取控制（链路访问控制）。&lt;/li&gt;
&lt;li&gt;在相邻节点间进行可靠数据传递。&lt;/li&gt;
&lt;li&gt;流量控制。&lt;/li&gt;
&lt;li&gt;检错。&lt;/li&gt;
&lt;li&gt;纠错。&lt;/li&gt;
&lt;li&gt;全双工和半双工服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链路层网络节点的连接方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;点到点方式：比较适合广域。&lt;/li&gt;
&lt;li&gt;多点连接的方式：比较适合局域、联网方便，但是需要解决 MAC 问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;检错与纠错&#34;&gt;检错与纠错
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检错原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;奇偶校验。&lt;/li&gt;
&lt;li&gt;CRC（循环冗余校验）&lt;font style=&#34;color:#DF2A3F;&#34;&gt; - 掌握&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;原理。&lt;/li&gt;
&lt;li&gt;生成多项式。&lt;/li&gt;
&lt;li&gt;冗余位计算方法以及验证方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多路访问协议&#34;&gt;多路访问协议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAC 的必要性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MAP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信道划分&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TDMA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDMA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CDMA&lt;/strong&gt;：删掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAP：随机访问协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;slotted ALOHA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALOHA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSMA&lt;/strong&gt;，&lt;strong&gt;&lt;font style=&#34;background-color:#FBF5CB;&#34;&gt;CSMA/CD（至少 2t 长度帧），CSMA/CA&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轮转协议：不要求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;令牌协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;链路层编地址&#34;&gt;链路层编地址
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAC 地址（48位）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;格式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MAC 地址和网络层 IP 地址的区别&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;层次不同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MAC 地址平面的，用于标示一个物理网络的不同站点；IP 是可以聚集的，便于计算路由&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARP 协议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的：物理网络范围内 IP 地址到 MAC 地址的转换&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作原理：广播查询，单播应答&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;以太网&#34;&gt;以太网
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;IEEE802.3 标准，链路层和相应的物理层。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以太网的帧结构。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;向上提供服务的特点。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;无连接：以太网在传输数据时不需要事先建立连接。&lt;/li&gt;
&lt;li&gt;不可靠：数据传输过程中不保证数据的可靠到达。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问控制技术。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSMA/CD&lt;/strong&gt; &lt;strong&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;（需掌握）&lt;/font&gt;&lt;/strong&gt;：载波侦听多路访问 / 冲突检测，用于解决以太网中的冲突问题。
&lt;ul&gt;
&lt;li&gt;指数后退：在发生冲突后，设备会采用指数后退算法等待一段时间后再尝试发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**CSMA/CA ** &lt;strong&gt;&lt;font style=&#34;color:#74B602;&#34;&gt;（需理解）&lt;/font&gt;&lt;/strong&gt;：载波侦听多路访问 / 冲突避免，适用于无线网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编码。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manchester 编码&lt;/strong&gt;：一种常用的编码方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;hub-和交换机&#34;&gt;HUB 和交换机
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HUB 连接方式的问题。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;无法隔离冲突，在一个冲突域之中：使用 HUB 连接设备时，所有连接的设备处于同一个冲突域，容易产生冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换机的工作原理。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;选择性转发：交换机可以根据目的地址有选择地转发数据。&lt;/li&gt;
&lt;li&gt;自学习：交换机能够自动学习连接设备的 MAC 地址。&lt;/li&gt;
&lt;li&gt;流量隔离：交换机可以隔离不同端口的流量，减少冲突。&lt;/li&gt;
&lt;li&gt;专用接入：交换机提供专用的接入端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由器和交换机的区别&lt;/strong&gt; &lt;strong&gt;&lt;font style=&#34;color:#74B602;&#34;&gt;（需理解）&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=76a496aa006e07f846fd0bbe5954c92e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
